
Hossam_Project_MyVersion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00003298  0000332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001a8  008001a8  00003474  2**0
                  ALLOC
  3 .stab         00002ff4  00000000  00000000  00003474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d1c  00000000  00000000  00006468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ce80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d336  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <main>
      8a:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e9       	ldi	r26, 0x9C	; 156
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 18 	jmp	0x316c	; 0x316c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e9       	ldi	r24, 0x9C	; 156
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 18 	jmp	0x316c	; 0x316c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e9       	ldi	r22, 0x9C	; 156
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 18 	jmp	0x317c	; 0x317c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 be 18 	jmp	0x317c	; 0x317c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 55       	subi	r30, 0x5C	; 92
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:

/* Description :
 * initiate the ADC module
 */
void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	* 	1.ADLAR   = 0 right adjusted
	*   2.MUX4:0  = 00000 to choose channel 0 as initialization
	*   3.REF1:0  = 00 Clear these two bits before setup the required reference voltage value*/
		ADC_ADMUX_REG.Byte = 0;
     e3c:	e7 e2       	ldi	r30, 0x27	; 39
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	10 82       	st	Z, r1

		/* Setup the reference voltage value inside the REFS1 and REFS0 bits*/
		ADC_ADMUX_REG.Byte|= (Config_Ptr->ref_volt);
     e42:	a7 e2       	ldi	r26, 0x27	; 39
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e2       	ldi	r30, 0x27	; 39
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	90 81       	ld	r25, Z
     e4c:	e9 81       	ldd	r30, Y+1	; 0x01
     e4e:	fa 81       	ldd	r31, Y+2	; 0x02
     e50:	80 81       	ld	r24, Z
     e52:	89 2b       	or	r24, r25
     e54:	8c 93       	st	X, r24
		 * ADEN    = 1 Enable ADC
		 * ADIE    = 0 Disable ADC Interrupt
		 * ADATE   = 0 Disable the AUTO trigger
		 * ADPS2:0 = 000 Clear these three bits before setup the required prescaler value
		 */
		ADC_ADCSRA_REG.Bits.ADEN_BIT=1;
     e56:	e6 e2       	ldi	r30, 0x26	; 38
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 68       	ori	r24, 0x80	; 128
     e5e:	80 83       	st	Z, r24

		/* Setup the prescaler value inside the ADPS2, ADPS1 and ADPS0 bits*/
		ADCSRA |= Config_Ptr->prescaler;
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	90 81       	ld	r25, Z
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	81 81       	ldd	r24, Z+1	; 0x01
     e70:	89 2b       	or	r24, r25
     e72:	8c 93       	st	X, r24

}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <ADC_readChannel>:
 * Function responsible for read analog data from a certain ADC channel
 * and convert it to digital using the ADC driver.
 */
#if (USE_ADC_IN_INTERRUPT_MODE==FALSE)
uint16 ADC_readChannel(uint8 channel_num)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
	/*ADC_ADMUX_REG.Byte &= 0xE0;        	 Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
	/*ADC_ADMUX_REG.Byte |=channel_num;  	 Choose the correct channel by setting the channel number in MUX4:0 bits */
	ADC_ADMUX_REG.Byte = (ADC_ADMUX_REG.Byte & 0xE0) | (channel_num);
     e8a:	a7 e2       	ldi	r26, 0x27	; 39
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e2       	ldi	r30, 0x27	; 39
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	98 2f       	mov	r25, r24
     e96:	90 7e       	andi	r25, 0xE0	; 224
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	89 2b       	or	r24, r25
     e9c:	8c 93       	st	X, r24

	/*start conversation */
	ADC_ADCSRA_REG.Bits.ADSC_BIT=1;
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	80 83       	st	Z, r24

	/* Wait for conversion to complete, ADIF becomes '1' */
	while(!(ADC_ADCSRA_REG.Bits.ADIF_BIT));
     ea8:	e6 e2       	ldi	r30, 0x26	; 38
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 71       	andi	r24, 0x10	; 16
     eb0:	88 23       	and	r24, r24
     eb2:	d1 f3       	breq	.-12     	; 0xea8 <ADC_readChannel+0x2a>
	/* Clear ADIF by write '1' to it for next conversion */
	ADC_ADCSRA_REG.Bits.ADIF_BIT=1;
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	80 83       	st	Z, r24
	/* Read the digital value from the data register */
	return ADC_ADC_REG.Two_Bytes;
     ebe:	e4 e2       	ldi	r30, 0x24	; 36
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
}
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <Buzzer_init>:
/*
 * Description :
 * A function to initialize the buzzer
 */
void Buzzer_init(void)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	/*Make the buzzer pin output pin*/
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	65 e0       	ldi	r22, 0x05	; 5
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>

	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_INPUT);
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	65 e0       	ldi	r22, 0x05	; 5
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <Buzzer_on>:
/*
 * Description :
 * A function to turn on the buzzer
 */
void Buzzer_on(void)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	65 e0       	ldi	r22, 0x05	; 5
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <Buzzer_off>:
/*
 * Description :
 * A function to turn off the buzzer
 */
void Buzzer_off(void)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_INPUT);
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	65 e0       	ldi	r22, 0x05	; 5
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
}
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <DcMOTOR_init>:
/* Description:
 * The Function to initialize the motors pin and setup the direction for the two motor
 * via using GPIO driver.
 */
void DcMOTOR_init(void)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
#if defined (USE_FIRST_DC_MOTOR_WITH_CONTROL_SPEED)||defined(USE_FIRST_DC_MOTOR_WITHOUT_CONTROL_SPEED)
	/*define FIRST_DC_MOTOR_IN1_PIN_ID and FIRST_DC_MOTOR_IN2_PIN_ID as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
	/*Initially Stop the First Motor */
	GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
#ifdef USE_FIRST_DC_MOTOR_WITH_CONTROL_SPEED
	/*define Enable pin of first motor as output pin*/
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID, FIRST_DC_MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	63 e0       	ldi	r22, 0x03	; 3
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
#ifdef USE_SECOND_DC_MOTOR_WITH_CONTROL_SPEED
	/*define Enable pin of second motor as output pin*/
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID, SECOND_DC_MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
#endif
#endif
}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <DCMOTOR_rotateWithControl>:
 * The function that rotate the DC Motor clock wise ,anti-clockwise or stop the motor
 * In this Function we can control the speed via using PWM
 */
#if defined(USE_FIRST_DC_MOTOR_WITH_CONTROL_SPEED) ||defined( USE_SECOND_DC_MOTOR_WITH_CONTROL_SPEED)
void DCMOTOR_rotateWithControl(uint8 a_state,uint8 a_speed,uint8 a_motorNum )
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <DCMOTOR_rotateWithControl+0x6>
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	6a 83       	std	Y+2, r22	; 0x02
     f70:	4b 83       	std	Y+3, r20	; 0x03
	if(a_motorNum==FIRST_DC_MOTOR)
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	69 f5       	brne	.+90     	; 0xfd2 <DCMOTOR_rotateWithControl+0x72>
		{
			if(STOP_ROTATION==a_state)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 23       	and	r24, r24
     f7c:	59 f4       	brne	.+22     	; 0xf94 <DCMOTOR_rotateWithControl+0x34>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
     f92:	1b c0       	rjmp	.+54     	; 0xfca <DCMOTOR_rotateWithControl+0x6a>
			}
			else if(ROTATE_CLOCKWISE==a_state)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	59 f4       	brne	.+22     	; 0xfb0 <DCMOTOR_rotateWithControl+0x50>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
     fae:	0d c0       	rjmp	.+26     	; 0xfca <DCMOTOR_rotateWithControl+0x6a>
			}
			else if(ROTATE_ANTI_CLOCKWISE==a_state)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	51 f4       	brne	.+20     	; 0xfca <DCMOTOR_rotateWithControl+0x6a>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, FIRST_DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
			}
			else
			{
				/*Do Nothing*/
			}
			PWM_Timer0_Start(a_speed);
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <PWM_Timer0_Start>
     fd0:	2c c0       	rjmp	.+88     	; 0x102a <DCMOTOR_rotateWithControl+0xca>
		}
		else if(a_motorNum==SECOND_DC_MOTOR)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	49 f5       	brne	.+82     	; 0x102a <DCMOTOR_rotateWithControl+0xca>
		{
			if(STOP_ROTATION==a_state)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	88 23       	and	r24, r24
     fdc:	59 f4       	brne	.+22     	; 0xff4 <DCMOTOR_rotateWithControl+0x94>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN3_PIN_ID, LOGIC_LOW);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN4_PIN_ID, LOGIC_LOW);
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	64 e0       	ldi	r22, 0x04	; 4
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
     ff2:	1b c0       	rjmp	.+54     	; 0x102a <DCMOTOR_rotateWithControl+0xca>
			}
			else if(ROTATE_CLOCKWISE==a_state)
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	59 f4       	brne	.+22     	; 0x1010 <DCMOTOR_rotateWithControl+0xb0>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN3_PIN_ID, LOGIC_LOW);
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	63 e0       	ldi	r22, 0x03	; 3
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN4_PIN_ID, LOGIC_HIGH);
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	64 e0       	ldi	r22, 0x04	; 4
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    100e:	0d c0       	rjmp	.+26     	; 0x102a <DCMOTOR_rotateWithControl+0xca>
			}
			else if(ROTATE_ANTI_CLOCKWISE==a_state)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	51 f4       	brne	.+20     	; 0x102a <DCMOTOR_rotateWithControl+0xca>
			{
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN3_PIN_ID, LOGIC_HIGH);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	63 e0       	ldi	r22, 0x03	; 3
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
				GPIO_writePin(DC_MOTOR_PORT_ID, SECOND_DC_MOTOR_IN4_PIN_ID, LOGIC_LOW);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	64 e0       	ldi	r22, 0x04	; 4
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
			}
			/*PWM_Timer0_Start( (speed*1.0 / 100) * 255);*/
			/*or implement any other PWM if u use First timer with it*/
		}

}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <flame_init>:
#include<avr/interrupt.h>
#include"std_types.h"
#include"flame_sensor.h"
void (*g_ptr2func)() = NULL_PTR;

void flame_init(){
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    SREG |= (1<<7);        // enable global intrupt
    103e:	af e5       	ldi	r26, 0x5F	; 95
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ef e5       	ldi	r30, 0x5F	; 95
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	80 68       	ori	r24, 0x80	; 128
    104a:	8c 93       	st	X, r24
    GICR|=(1<<INT2);      // enable INT2
    104c:	ab e5       	ldi	r26, 0x5B	; 91
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	eb e5       	ldi	r30, 0x5B	; 91
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 62       	ori	r24, 0x20	; 32
    1058:	8c 93       	st	X, r24
    MCUCSR&=~(1<<ISC2);
    105a:	a4 e5       	ldi	r26, 0x54	; 84
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e4 e5       	ldi	r30, 0x54	; 84
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8f 7b       	andi	r24, 0xBF	; 191
    1066:	8c 93       	st	X, r24
}
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <flame_setCallBack>:

void flame_setCallBack(void (*ptr2func)()){
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <flame_setCallBack+0x6>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr2func != NULL_PTR){
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	31 f0       	breq	.+12     	; 0x1090 <flame_setCallBack+0x22>
		g_ptr2func = ptr2func;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	90 93 a9 01 	sts	0x01A9, r25
    108c:	80 93 a8 01 	sts	0x01A8, r24
	}

}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <__vector_3>:

ISR(INT2_vect){
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr2func != NULL_PTR){
    10c4:	80 91 a8 01 	lds	r24, 0x01A8
    10c8:	90 91 a9 01 	lds	r25, 0x01A9
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	29 f0       	breq	.+10     	; 0x10da <__vector_3+0x40>
		g_ptr2func();
    10d0:	e0 91 a8 01 	lds	r30, 0x01A8
    10d4:	f0 91 a9 01 	lds	r31, 0x01A9
    10d8:	09 95       	icall
	}
}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	7f 91       	pop	r23
    10ec:	6f 91       	pop	r22
    10ee:	5f 91       	pop	r21
    10f0:	4f 91       	pop	r20
    10f2:	3f 91       	pop	r19
    10f4:	2f 91       	pop	r18
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <GPIO_setupPinDirection+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <GPIO_setupPinDirection+0x8>
    1108:	0f 92       	push	r0
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6a 83       	std	Y+2, r22	; 0x02
    1112:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	88 30       	cpi	r24, 0x08	; 8
    1118:	08 f0       	brcs	.+2      	; 0x111c <GPIO_setupPinDirection+0x1c>
    111a:	d5 c0       	rjmp	.+426    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	84 30       	cpi	r24, 0x04	; 4
    1120:	08 f0       	brcs	.+2      	; 0x1124 <GPIO_setupPinDirection+0x24>
    1122:	d1 c0       	rjmp	.+418    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3d 83       	std	Y+5, r19	; 0x05
    112c:	2c 83       	std	Y+4, r18	; 0x04
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <GPIO_setupPinDirection+0x3a>
    1138:	43 c0       	rjmp	.+134    	; 0x11c0 <GPIO_setupPinDirection+0xc0>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	2c f4       	brge	.+10     	; 0x114e <GPIO_setupPinDirection+0x4e>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	71 f0       	breq	.+28     	; 0x1168 <GPIO_setupPinDirection+0x68>
    114c:	bc c0       	rjmp	.+376    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
    114e:	2c 81       	ldd	r18, Y+4	; 0x04
    1150:	3d 81       	ldd	r19, Y+5	; 0x05
    1152:	22 30       	cpi	r18, 0x02	; 2
    1154:	31 05       	cpc	r19, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <GPIO_setupPinDirection+0x5a>
    1158:	5f c0       	rjmp	.+190    	; 0x1218 <GPIO_setupPinDirection+0x118>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	09 f4       	brne	.+2      	; 0x1166 <GPIO_setupPinDirection+0x66>
    1164:	85 c0       	rjmp	.+266    	; 0x1270 <GPIO_setupPinDirection+0x170>
    1166:	af c0       	rjmp	.+350    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	a1 f4       	brne	.+40     	; 0x1196 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(GPIO_DDRA_REG.Byte,pin_num);
    116e:	aa e3       	ldi	r26, 0x3A	; 58
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ea e3       	ldi	r30, 0x3A	; 58
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_setupPinDirection+0x8c>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_setupPinDirection+0x88>
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	98 c0       	rjmp	.+304    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRA_REG.Byte,pin_num);
    1196:	aa e3       	ldi	r26, 0x3A	; 58
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ea e3       	ldi	r30, 0x3A	; 58
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_setupPinDirection+0xb4>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_setupPinDirection+0xb0>
    11b8:	80 95       	com	r24
    11ba:	84 23       	and	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	83 c0       	rjmp	.+262    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	a1 f4       	brne	.+40     	; 0x11ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(GPIO_DDRB_REG.Byte,pin_num);
    11c6:	a7 e3       	ldi	r26, 0x37	; 55
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e7 e3       	ldi	r30, 0x37	; 55
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_setupPinDirection+0xe4>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_setupPinDirection+0xe0>
    11e8:	84 2b       	or	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	6c c0       	rjmp	.+216    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRB_REG.Byte,pin_num);
    11ee:	a7 e3       	ldi	r26, 0x37	; 55
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e7 e3       	ldi	r30, 0x37	; 55
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_setupPinDirection+0x10c>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_setupPinDirection+0x108>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	57 c0       	rjmp	.+174    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	a1 f4       	brne	.+40     	; 0x1246 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(GPIO_DDRC_REG.Byte,pin_num);
    121e:	a4 e3       	ldi	r26, 0x34	; 52
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e4 e3       	ldi	r30, 0x34	; 52
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_setupPinDirection+0x13c>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_setupPinDirection+0x138>
    1240:	84 2b       	or	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	40 c0       	rjmp	.+128    	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRC_REG.Byte,pin_num);
    1246:	a4 e3       	ldi	r26, 0x34	; 52
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e4 e3       	ldi	r30, 0x34	; 52
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_setupPinDirection+0x164>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_setupPinDirection+0x160>
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	2b c0       	rjmp	.+86     	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	a1 f4       	brne	.+40     	; 0x129e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(GPIO_DDRD_REG.Byte,pin_num);
    1276:	a1 e3       	ldi	r26, 0x31	; 49
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e1 e3       	ldi	r30, 0x31	; 49
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_setupPinDirection+0x194>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_setupPinDirection+0x190>
    1298:	84 2b       	or	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	14 c0       	rjmp	.+40     	; 0x12c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_DDRD_REG.Byte,pin_num);
    129e:	a1 e3       	ldi	r26, 0x31	; 49
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e1 e3       	ldi	r30, 0x31	; 49
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <GPIO_setupPinDirection+0x1bc>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <GPIO_setupPinDirection+0x1b8>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <GPIO_writePin+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <GPIO_writePin+0x8>
    12de:	0f 92       	push	r0
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	6a 83       	std	Y+2, r22	; 0x02
    12e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	88 30       	cpi	r24, 0x08	; 8
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <GPIO_writePin+0x1c>
    12f0:	d5 c0       	rjmp	.+426    	; 0x149c <GPIO_writePin+0x1c6>
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <GPIO_writePin+0x24>
    12f8:	d1 c0       	rjmp	.+418    	; 0x149c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3d 83       	std	Y+5, r19	; 0x05
    1302:	2c 83       	std	Y+4, r18	; 0x04
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <GPIO_writePin+0x3a>
    130e:	43 c0       	rjmp	.+134    	; 0x1396 <GPIO_writePin+0xc0>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	2c f4       	brge	.+10     	; 0x1324 <GPIO_writePin+0x4e>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	71 f0       	breq	.+28     	; 0x133e <GPIO_writePin+0x68>
    1322:	bc c0       	rjmp	.+376    	; 0x149c <GPIO_writePin+0x1c6>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <GPIO_writePin+0x5a>
    132e:	5f c0       	rjmp	.+190    	; 0x13ee <GPIO_writePin+0x118>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	83 30       	cpi	r24, 0x03	; 3
    1336:	91 05       	cpc	r25, r1
    1338:	09 f4       	brne	.+2      	; 0x133c <GPIO_writePin+0x66>
    133a:	85 c0       	rjmp	.+266    	; 0x1446 <GPIO_writePin+0x170>
    133c:	af c0       	rjmp	.+350    	; 0x149c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	a1 f4       	brne	.+40     	; 0x136c <GPIO_writePin+0x96>
			{
				SET_BIT(GPIO_PORTA_REG.Byte,pin_num);
    1344:	ab e3       	ldi	r26, 0x3B	; 59
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_writePin+0x8c>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_writePin+0x88>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	98 c0       	rjmp	.+304    	; 0x149c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTA_REG.Byte,pin_num);
    136c:	ab e3       	ldi	r26, 0x3B	; 59
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb e3       	ldi	r30, 0x3B	; 59
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <GPIO_writePin+0xb4>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <GPIO_writePin+0xb0>
    138e:	80 95       	com	r24
    1390:	84 23       	and	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	83 c0       	rjmp	.+262    	; 0x149c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	a1 f4       	brne	.+40     	; 0x13c4 <GPIO_writePin+0xee>
			{
				SET_BIT(GPIO_PORTB_REG.Byte,pin_num);
    139c:	a8 e3       	ldi	r26, 0x38	; 56
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e8 e3       	ldi	r30, 0x38	; 56
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_writePin+0xe4>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_writePin+0xe0>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	6c c0       	rjmp	.+216    	; 0x149c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTB_REG.Byte,pin_num);
    13c4:	a8 e3       	ldi	r26, 0x38	; 56
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e3       	ldi	r30, 0x38	; 56
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_writePin+0x10c>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_writePin+0x108>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	57 c0       	rjmp	.+174    	; 0x149c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	a1 f4       	brne	.+40     	; 0x141c <GPIO_writePin+0x146>
			{
				SET_BIT(GPIO_PORTC_REG.Byte,pin_num);
    13f4:	a5 e3       	ldi	r26, 0x35	; 53
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e5 e3       	ldi	r30, 0x35	; 53
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <GPIO_writePin+0x13c>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <GPIO_writePin+0x138>
    1416:	84 2b       	or	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	40 c0       	rjmp	.+128    	; 0x149c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTC_REG.Byte,pin_num);
    141c:	a5 e3       	ldi	r26, 0x35	; 53
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e3       	ldi	r30, 0x35	; 53
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_writePin+0x164>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_writePin+0x160>
    143e:	80 95       	com	r24
    1440:	84 23       	and	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	2b c0       	rjmp	.+86     	; 0x149c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	a1 f4       	brne	.+40     	; 0x1474 <GPIO_writePin+0x19e>
			{
				SET_BIT(GPIO_PORTD_REG.Byte,pin_num);
    144c:	a2 e3       	ldi	r26, 0x32	; 50
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e2 e3       	ldi	r30, 0x32	; 50
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <GPIO_writePin+0x194>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <GPIO_writePin+0x190>
    146e:	84 2b       	or	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	14 c0       	rjmp	.+40     	; 0x149c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(GPIO_PORTD_REG.Byte,pin_num);
    1474:	a2 e3       	ldi	r26, 0x32	; 50
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e2 e3       	ldi	r30, 0x32	; 50
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <GPIO_writePin+0x1bc>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <GPIO_writePin+0x1b8>
    1496:	80 95       	com	r24
    1498:	84 23       	and	r24, r20
    149a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <GPIO_readPin+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <GPIO_readPin+0x8>
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    14be:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <GPIO_readPin+0x1c>
    14c6:	84 c0       	rjmp	.+264    	; 0x15d0 <GPIO_readPin+0x124>
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <GPIO_readPin+0x24>
    14ce:	80 c0       	rjmp	.+256    	; 0x15d0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3d 83       	std	Y+5, r19	; 0x05
    14d8:	2c 83       	std	Y+4, r18	; 0x04
    14da:	4c 81       	ldd	r20, Y+4	; 0x04
    14dc:	5d 81       	ldd	r21, Y+5	; 0x05
    14de:	41 30       	cpi	r20, 0x01	; 1
    14e0:	51 05       	cpc	r21, r1
    14e2:	79 f1       	breq	.+94     	; 0x1542 <GPIO_readPin+0x96>
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	91 05       	cpc	r25, r1
    14ec:	34 f4       	brge	.+12     	; 0x14fa <GPIO_readPin+0x4e>
    14ee:	2c 81       	ldd	r18, Y+4	; 0x04
    14f0:	3d 81       	ldd	r19, Y+5	; 0x05
    14f2:	21 15       	cp	r18, r1
    14f4:	31 05       	cpc	r19, r1
    14f6:	69 f0       	breq	.+26     	; 0x1512 <GPIO_readPin+0x66>
    14f8:	6b c0       	rjmp	.+214    	; 0x15d0 <GPIO_readPin+0x124>
    14fa:	4c 81       	ldd	r20, Y+4	; 0x04
    14fc:	5d 81       	ldd	r21, Y+5	; 0x05
    14fe:	42 30       	cpi	r20, 0x02	; 2
    1500:	51 05       	cpc	r21, r1
    1502:	b9 f1       	breq	.+110    	; 0x1572 <GPIO_readPin+0xc6>
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <GPIO_readPin+0x64>
    150e:	49 c0       	rjmp	.+146    	; 0x15a2 <GPIO_readPin+0xf6>
    1510:	5f c0       	rjmp	.+190    	; 0x15d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(GPIO_PINA_REG.Byte,pin_num))
    1512:	e9 e3       	ldi	r30, 0x39	; 57
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_readPin+0x7e>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_readPin+0x7a>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	90 70       	andi	r25, 0x00	; 0
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	49 c0       	rjmp	.+146    	; 0x15d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    153e:	19 82       	std	Y+1, r1	; 0x01
    1540:	47 c0       	rjmp	.+142    	; 0x15d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(GPIO_PINB_REG.Byte,pin_num))
    1542:	e6 e3       	ldi	r30, 0x36	; 54
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_readPin+0xae>
    1556:	55 95       	asr	r21
    1558:	47 95       	ror	r20
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_readPin+0xaa>
    155e:	ca 01       	movw	r24, r20
    1560:	81 70       	andi	r24, 0x01	; 1
    1562:	90 70       	andi	r25, 0x00	; 0
    1564:	88 23       	and	r24, r24
    1566:	19 f0       	breq	.+6      	; 0x156e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	31 c0       	rjmp	.+98     	; 0x15d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    156e:	19 82       	std	Y+1, r1	; 0x01
    1570:	2f c0       	rjmp	.+94     	; 0x15d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(GPIO_PINC_REG.Byte,pin_num))
    1572:	e3 e3       	ldi	r30, 0x33	; 51
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_readPin+0xde>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_readPin+0xda>
    158e:	ca 01       	movw	r24, r20
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	90 70       	andi	r25, 0x00	; 0
    1594:	88 23       	and	r24, r24
    1596:	19 f0       	breq	.+6      	; 0x159e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	19 c0       	rjmp	.+50     	; 0x15d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    159e:	19 82       	std	Y+1, r1	; 0x01
    15a0:	17 c0       	rjmp	.+46     	; 0x15d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(GPIO_PIND_REG.Byte,pin_num))
    15a2:	e0 e3       	ldi	r30, 0x30	; 48
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a9 01       	movw	r20, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_readPin+0x10e>
    15b6:	55 95       	asr	r21
    15b8:	47 95       	ror	r20
    15ba:	8a 95       	dec	r24
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_readPin+0x10a>
    15be:	ca 01       	movw	r24, r20
    15c0:	81 70       	andi	r24, 0x01	; 1
    15c2:	90 70       	andi	r25, 0x00	; 0
    15c4:	88 23       	and	r24, r24
    15c6:	19 f0       	breq	.+6      	; 0x15ce <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_setupPortDirection+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <GPIO_setupPortDirection+0x8>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	84 30       	cpi	r24, 0x04	; 4
    15f6:	90 f5       	brcc	.+100    	; 0x165c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3c 83       	std	Y+4, r19	; 0x04
    1600:	2b 83       	std	Y+3, r18	; 0x03
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	d1 f0       	breq	.+52     	; 0x1640 <GPIO_setupPortDirection+0x5e>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	2c f4       	brge	.+10     	; 0x1620 <GPIO_setupPortDirection+0x3e>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	61 f0       	breq	.+24     	; 0x1636 <GPIO_setupPortDirection+0x54>
    161e:	1e c0       	rjmp	.+60     	; 0x165c <GPIO_setupPortDirection+0x7a>
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	3c 81       	ldd	r19, Y+4	; 0x04
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	81 f0       	breq	.+32     	; 0x164a <GPIO_setupPortDirection+0x68>
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	91 05       	cpc	r25, r1
    1632:	81 f0       	breq	.+32     	; 0x1654 <GPIO_setupPortDirection+0x72>
    1634:	13 c0       	rjmp	.+38     	; 0x165c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			GPIO_DDRA_REG.Byte=direction;
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	80 83       	st	Z, r24
    163e:	0e c0       	rjmp	.+28     	; 0x165c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			GPIO_DDRB_REG.Byte=direction;
    1640:	e7 e3       	ldi	r30, 0x37	; 55
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	80 83       	st	Z, r24
    1648:	09 c0       	rjmp	.+18     	; 0x165c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			GPIO_DDRC_REG.Byte=direction;
    164a:	e4 e3       	ldi	r30, 0x34	; 52
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	80 83       	st	Z, r24
    1652:	04 c0       	rjmp	.+8      	; 0x165c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			GPIO_DDRD_REG.Byte=direction;
    1654:	e1 e3       	ldi	r30, 0x31	; 49
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	80 83       	st	Z, r24
			break;
		}
	}
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <GPIO_writePort+0x6>
    1670:	00 d0       	rcall	.+0      	; 0x1672 <GPIO_writePort+0x8>
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	90 f5       	brcc	.+100    	; 0x16e4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3c 83       	std	Y+4, r19	; 0x04
    1688:	2b 83       	std	Y+3, r18	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	d1 f0       	breq	.+52     	; 0x16c8 <GPIO_writePort+0x5e>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <GPIO_writePort+0x3e>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	61 f0       	breq	.+24     	; 0x16be <GPIO_writePort+0x54>
    16a6:	1e c0       	rjmp	.+60     	; 0x16e4 <GPIO_writePort+0x7a>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	81 f0       	breq	.+32     	; 0x16d2 <GPIO_writePort+0x68>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	81 f0       	breq	.+32     	; 0x16dc <GPIO_writePort+0x72>
    16bc:	13 c0       	rjmp	.+38     	; 0x16e4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			GPIO_PORTA_REG.Byte = value;
    16be:	eb e3       	ldi	r30, 0x3B	; 59
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	80 83       	st	Z, r24
    16c6:	0e c0       	rjmp	.+28     	; 0x16e4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			GPIO_PORTB_REG.Byte = value;
    16c8:	e8 e3       	ldi	r30, 0x38	; 56
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	80 83       	st	Z, r24
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			GPIO_PORTC_REG.Byte = value;
    16d2:	e5 e3       	ldi	r30, 0x35	; 53
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	80 83       	st	Z, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			GPIO_PORTD_REG.Byte = value;
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <GPIO_readPort+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <GPIO_readPort+0x8>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1700:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	90 f5       	brcc	.+100    	; 0x176c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3c 83       	std	Y+4, r19	; 0x04
    1710:	2b 83       	std	Y+3, r18	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	d1 f0       	breq	.+52     	; 0x1750 <GPIO_readPort+0x5e>
    171c:	2b 81       	ldd	r18, Y+3	; 0x03
    171e:	3c 81       	ldd	r19, Y+4	; 0x04
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	2c f4       	brge	.+10     	; 0x1730 <GPIO_readPort+0x3e>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	61 f0       	breq	.+24     	; 0x1746 <GPIO_readPort+0x54>
    172e:	1e c0       	rjmp	.+60     	; 0x176c <GPIO_readPort+0x7a>
    1730:	2b 81       	ldd	r18, Y+3	; 0x03
    1732:	3c 81       	ldd	r19, Y+4	; 0x04
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	81 f0       	breq	.+32     	; 0x175a <GPIO_readPort+0x68>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	81 f0       	breq	.+32     	; 0x1764 <GPIO_readPort+0x72>
    1744:	13 c0       	rjmp	.+38     	; 0x176c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = GPIO_PINA_REG.Byte;
    1746:	e9 e3       	ldi	r30, 0x39	; 57
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	0e c0       	rjmp	.+28     	; 0x176c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = GPIO_PINB_REG.Byte;
    1750:	e6 e3       	ldi	r30, 0x36	; 54
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	09 c0       	rjmp	.+18     	; 0x176c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = GPIO_PINC_REG.Byte;
    175a:	e3 e3       	ldi	r30, 0x33	; 51
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	04 c0       	rjmp	.+8      	; 0x176c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = GPIO_PIND_REG.Byte;
    1764:	e0 e3       	ldi	r30, 0x30	; 48
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    176c:	89 81       	ldd	r24, Y+1	; 0x01
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	2e 97       	sbiw	r28, 0x0e	; 14
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	62 e0       	ldi	r22, 0x02	; 2
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 ea       	ldi	r26, 0xA0	; 160
    17aa:	b1 e4       	ldi	r27, 0x41	; 65
    17ac:	8b 87       	std	Y+11, r24	; 0x0b
    17ae:	9c 87       	std	Y+12, r25	; 0x0c
    17b0:	ad 87       	std	Y+13, r26	; 0x0d
    17b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	55 e4       	ldi	r21, 0x45	; 69
    17c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8f 83       	std	Y+7, r24	; 0x07
    17ce:	98 87       	std	Y+8, r25	; 0x08
    17d0:	a9 87       	std	Y+9, r26	; 0x09
    17d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <LCD_init+0x7a>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <LCD_init+0xf8>
	else if (__tmp > 65535)
    17f6:	6f 81       	ldd	r22, Y+7	; 0x07
    17f8:	78 85       	ldd	r23, Y+8	; 0x08
    17fa:	89 85       	ldd	r24, Y+9	; 0x09
    17fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <LCD_init+0xda>
    1838:	80 e9       	ldi	r24, 0x90	; 144
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_init+0xc8>
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <LCD_init+0xbc>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6f 81       	ldd	r22, Y+7	; 0x07
    1862:	78 85       	ldd	r23, Y+8	; 0x08
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_init+0x104>
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	63 e0       	ldi	r22, 0x03	; 3
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	64 e0       	ldi	r22, 0x04	; 4
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	65 e0       	ldi	r22, 0x05	; 5
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	66 e0       	ldi	r22, 0x06	; 6
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    18b0:	83 e3       	ldi	r24, 0x33	; 51
    18b2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    18b6:	82 e3       	ldi	r24, 0x32	; 50
    18b8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    18bc:	88 e2       	ldi	r24, 0x28	; 40
    18be:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18c2:	8c e0       	ldi	r24, 0x0C	; 12
    18c4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_sendCommand>
}
    18ce:	2e 96       	adiw	r28, 0x0e	; 14
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	c3 56       	subi	r28, 0x63	; 99
    18ee:	d0 40       	sbci	r29, 0x00	; 0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	fe 01       	movw	r30, r28
    18fc:	ed 59       	subi	r30, 0x9D	; 157
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    190c:	fe 01       	movw	r30, r28
    190e:	e1 5a       	subi	r30, 0xA1	; 161
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 e8       	ldi	r26, 0x80	; 128
    1918:	bf e3       	ldi	r27, 0x3F	; 63
    191a:	80 83       	st	Z, r24
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	a2 83       	std	Z+2, r26	; 0x02
    1920:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	8e 01       	movw	r16, r28
    1924:	05 5a       	subi	r16, 0xA5	; 165
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	fe 01       	movw	r30, r28
    192a:	e1 5a       	subi	r30, 0xA1	; 161
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	4a e7       	ldi	r20, 0x7A	; 122
    193c:	55 e4       	ldi	r21, 0x45	; 69
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	f8 01       	movw	r30, r16
    1948:	80 83       	st	Z, r24
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	a2 83       	std	Z+2, r26	; 0x02
    194e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1950:	fe 01       	movw	r30, r28
    1952:	e5 5a       	subi	r30, 0xA5	; 165
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	44 f4       	brge	.+16     	; 0x197e <LCD_sendCommand+0x9e>
		__ticks = 1;
    196e:	fe 01       	movw	r30, r28
    1970:	e7 5a       	subi	r30, 0xA7	; 167
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	64 c0       	rjmp	.+200    	; 0x1a46 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    197e:	fe 01       	movw	r30, r28
    1980:	e5 5a       	subi	r30, 0xA5	; 165
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	0c f0       	brlt	.+2      	; 0x199e <LCD_sendCommand+0xbe>
    199c:	43 c0       	rjmp	.+134    	; 0x1a24 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199e:	fe 01       	movw	r30, r28
    19a0:	e1 5a       	subi	r30, 0xA1	; 161
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	60 81       	ld	r22, Z
    19a6:	71 81       	ldd	r23, Z+1	; 0x01
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8e 01       	movw	r16, r28
    19be:	07 5a       	subi	r16, 0xA7	; 167
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
    19d4:	1f c0       	rjmp	.+62     	; 0x1a14 <LCD_sendCommand+0x134>
    19d6:	fe 01       	movw	r30, r28
    19d8:	e9 5a       	subi	r30, 0xA9	; 169
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 e9       	ldi	r24, 0x90	; 144
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	fe 01       	movw	r30, r28
    19e6:	e9 5a       	subi	r30, 0xA9	; 169
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_sendCommand+0x10e>
    19f2:	fe 01       	movw	r30, r28
    19f4:	e9 5a       	subi	r30, 0xA9	; 169
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	de 01       	movw	r26, r28
    19fe:	a7 5a       	subi	r26, 0xA7	; 167
    1a00:	bf 4f       	sbci	r27, 0xFF	; 255
    1a02:	fe 01       	movw	r30, r28
    1a04:	e7 5a       	subi	r30, 0xA7	; 167
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	11 96       	adiw	r26, 0x01	; 1
    1a10:	9c 93       	st	X, r25
    1a12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	fe 01       	movw	r30, r28
    1a16:	e7 5a       	subi	r30, 0xA7	; 167
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	d1 f6       	brne	.-76     	; 0x19d6 <LCD_sendCommand+0xf6>
    1a22:	27 c0       	rjmp	.+78     	; 0x1a72 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	8e 01       	movw	r16, r28
    1a26:	07 5a       	subi	r16, 0xA7	; 167
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e5 5a       	subi	r30, 0xA5	; 165
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	f8 01       	movw	r30, r16
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	de 01       	movw	r26, r28
    1a48:	ab 5a       	subi	r26, 0xAB	; 171
    1a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e7 5a       	subi	r30, 0xA7	; 167
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	8d 93       	st	X+, r24
    1a58:	9c 93       	st	X, r25
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	eb 5a       	subi	r30, 0xAB	; 171
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <LCD_sendCommand+0x184>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	eb 5a       	subi	r30, 0xAB	; 171
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ef 5a       	subi	r30, 0xAF	; 175
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a0 e8       	ldi	r26, 0x80	; 128
    1a88:	bf e3       	ldi	r27, 0x3F	; 63
    1a8a:	80 83       	st	Z, r24
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	a2 83       	std	Z+2, r26	; 0x02
    1a90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a92:	8e 01       	movw	r16, r28
    1a94:	03 5b       	subi	r16, 0xB3	; 179
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 5a       	subi	r30, 0xAF	; 175
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	55 e4       	ldi	r21, 0x45	; 69
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	80 83       	st	Z, r24
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	a2 83       	std	Z+2, r26	; 0x02
    1abe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e3 5b       	subi	r30, 0xB3	; 179
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	44 f4       	brge	.+16     	; 0x1aee <LCD_sendCommand+0x20e>
		__ticks = 1;
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e5 5b       	subi	r30, 0xB5	; 181
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
    1aec:	64 c0       	rjmp	.+200    	; 0x1bb6 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1aee:	fe 01       	movw	r30, r28
    1af0:	e3 5b       	subi	r30, 0xB3	; 179
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	0c f0       	brlt	.+2      	; 0x1b0e <LCD_sendCommand+0x22e>
    1b0c:	43 c0       	rjmp	.+134    	; 0x1b94 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ef 5a       	subi	r30, 0xAF	; 175
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	05 5b       	subi	r16, 0xB5	; 181
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	f8 01       	movw	r30, r16
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
    1b44:	1f c0       	rjmp	.+62     	; 0x1b84 <LCD_sendCommand+0x2a4>
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 5b       	subi	r30, 0xB7	; 183
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 e9       	ldi	r24, 0x90	; 144
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	80 83       	st	Z, r24
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 5b       	subi	r30, 0xB7	; 183
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_sendCommand+0x27e>
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	de 01       	movw	r26, r28
    1b6e:	a5 5b       	subi	r26, 0xB5	; 181
    1b70:	bf 4f       	sbci	r27, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	e5 5b       	subi	r30, 0xB5	; 181
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	9c 93       	st	X, r25
    1b82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e5 5b       	subi	r30, 0xB5	; 181
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	d1 f6       	brne	.-76     	; 0x1b46 <LCD_sendCommand+0x266>
    1b92:	27 c0       	rjmp	.+78     	; 0x1be2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	8e 01       	movw	r16, r28
    1b96:	05 5b       	subi	r16, 0xB5	; 181
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e3 5b       	subi	r30, 0xB3	; 179
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24
    1bb6:	de 01       	movw	r26, r28
    1bb8:	a9 5b       	subi	r26, 0xB9	; 185
    1bba:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 5b       	subi	r30, 0xB5	; 181
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	8d 93       	st	X+, r24
    1bc8:	9c 93       	st	X, r25
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e9 5b       	subi	r30, 0xB9	; 185
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_sendCommand+0x2f4>
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e9 5b       	subi	r30, 0xB9	; 185
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1be2:	fe 01       	movw	r30, r28
    1be4:	ed 59       	subi	r30, 0x9D	; 157
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	80 71       	andi	r24, 0x10	; 16
    1bf0:	90 70       	andi	r25, 0x00	; 0
    1bf2:	95 95       	asr	r25
    1bf4:	87 95       	ror	r24
    1bf6:	95 95       	asr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	95 95       	asr	r25
    1bfc:	87 95       	ror	r24
    1bfe:	95 95       	asr	r25
    1c00:	87 95       	ror	r24
    1c02:	98 2f       	mov	r25, r24
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	63 e0       	ldi	r22, 0x03	; 3
    1c08:	49 2f       	mov	r20, r25
    1c0a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1c0e:	fe 01       	movw	r30, r28
    1c10:	ed 59       	subi	r30, 0x9D	; 157
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 81       	ld	r24, Z
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	80 72       	andi	r24, 0x20	; 32
    1c1c:	90 70       	andi	r25, 0x00	; 0
    1c1e:	95 95       	asr	r25
    1c20:	87 95       	ror	r24
    1c22:	95 95       	asr	r25
    1c24:	87 95       	ror	r24
    1c26:	95 95       	asr	r25
    1c28:	87 95       	ror	r24
    1c2a:	95 95       	asr	r25
    1c2c:	87 95       	ror	r24
    1c2e:	95 95       	asr	r25
    1c30:	87 95       	ror	r24
    1c32:	98 2f       	mov	r25, r24
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	64 e0       	ldi	r22, 0x04	; 4
    1c38:	49 2f       	mov	r20, r25
    1c3a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1c3e:	fe 01       	movw	r30, r28
    1c40:	ed 59       	subi	r30, 0x9D	; 157
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	80 74       	andi	r24, 0x40	; 64
    1c4c:	90 70       	andi	r25, 0x00	; 0
    1c4e:	08 2e       	mov	r0, r24
    1c50:	89 2f       	mov	r24, r25
    1c52:	00 0c       	add	r0, r0
    1c54:	88 1f       	adc	r24, r24
    1c56:	99 0b       	sbc	r25, r25
    1c58:	00 0c       	add	r0, r0
    1c5a:	88 1f       	adc	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	98 2f       	mov	r25, r24
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	65 e0       	ldi	r22, 0x05	; 5
    1c64:	49 2f       	mov	r20, r25
    1c66:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ed 59       	subi	r30, 0x9D	; 157
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	98 2f       	mov	r25, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	99 27       	eor	r25, r25
    1c78:	99 1f       	adc	r25, r25
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	66 e0       	ldi	r22, 0x06	; 6
    1c7e:	49 2f       	mov	r20, r25
    1c80:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    1c84:	fe 01       	movw	r30, r28
    1c86:	ed 5b       	subi	r30, 0xBD	; 189
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e8       	ldi	r26, 0x80	; 128
    1c90:	bf e3       	ldi	r27, 0x3F	; 63
    1c92:	80 83       	st	Z, r24
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	a2 83       	std	Z+2, r26	; 0x02
    1c98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	8e 01       	movw	r16, r28
    1c9c:	01 5c       	subi	r16, 0xC1	; 193
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ed 5b       	subi	r30, 0xBD	; 189
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a e7       	ldi	r20, 0x7A	; 122
    1cb4:	55 e4       	ldi	r21, 0x45	; 69
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	80 83       	st	Z, r24
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	a2 83       	std	Z+2, r26	; 0x02
    1cc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ff 96       	adiw	r30, 0x3f	; 63
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <LCD_sendCommand+0x40e>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e af       	std	Y+62, r25	; 0x3e
    1cea:	8d af       	std	Y+61, r24	; 0x3d
    1cec:	46 c0       	rjmp	.+140    	; 0x1d7a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ff 96       	adiw	r30, 0x3f	; 63
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	64 f5       	brge	.+88     	; 0x1d62 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ed 5b       	subi	r30, 0xBD	; 189
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e2       	ldi	r20, 0x20	; 32
    1d1e:	51 e4       	ldi	r21, 0x41	; 65
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9e af       	std	Y+62, r25	; 0x3e
    1d36:	8d af       	std	Y+61, r24	; 0x3d
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <LCD_sendCommand+0x478>
    1d3a:	80 e9       	ldi	r24, 0x90	; 144
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	9c af       	std	Y+60, r25	; 0x3c
    1d40:	8b af       	std	Y+59, r24	; 0x3b
    1d42:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d44:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_sendCommand+0x466>
    1d4a:	9c af       	std	Y+60, r25	; 0x3c
    1d4c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	9e af       	std	Y+62, r25	; 0x3e
    1d56:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	69 f7       	brne	.-38     	; 0x1d3a <LCD_sendCommand+0x45a>
    1d60:	16 c0       	rjmp	.+44     	; 0x1d8e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d62:	fe 01       	movw	r30, r28
    1d64:	ff 96       	adiw	r30, 0x3f	; 63
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e af       	std	Y+62, r25	; 0x3e
    1d78:	8d af       	std	Y+61, r24	; 0x3d
    1d7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d7e:	9a af       	std	Y+58, r25	; 0x3a
    1d80:	89 af       	std	Y+57, r24	; 0x39
    1d82:	89 ad       	ldd	r24, Y+57	; 0x39
    1d84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_sendCommand+0x4a6>
    1d8a:	9a af       	std	Y+58, r25	; 0x3a
    1d8c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e8       	ldi	r26, 0x80	; 128
    1d9e:	bf e3       	ldi	r27, 0x3F	; 63
    1da0:	8d ab       	std	Y+53, r24	; 0x35
    1da2:	9e ab       	std	Y+54, r25	; 0x36
    1da4:	af ab       	std	Y+55, r26	; 0x37
    1da6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	6d a9       	ldd	r22, Y+53	; 0x35
    1daa:	7e a9       	ldd	r23, Y+54	; 0x36
    1dac:	8f a9       	ldd	r24, Y+55	; 0x37
    1dae:	98 ad       	ldd	r25, Y+56	; 0x38
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	55 e4       	ldi	r21, 0x45	; 69
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	89 ab       	std	Y+49, r24	; 0x31
    1dc2:	9a ab       	std	Y+50, r25	; 0x32
    1dc4:	ab ab       	std	Y+51, r26	; 0x33
    1dc6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dca:	7a a9       	ldd	r23, Y+50	; 0x32
    1dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dce:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_sendCommand+0x50a>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	98 ab       	std	Y+48, r25	; 0x30
    1de6:	8f a7       	std	Y+47, r24	; 0x2f
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1dea:	69 a9       	ldd	r22, Y+49	; 0x31
    1dec:	7a a9       	ldd	r23, Y+50	; 0x32
    1dee:	8b a9       	ldd	r24, Y+51	; 0x33
    1df0:	9c a9       	ldd	r25, Y+52	; 0x34
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	6d a9       	ldd	r22, Y+53	; 0x35
    1e04:	7e a9       	ldd	r23, Y+54	; 0x36
    1e06:	8f a9       	ldd	r24, Y+55	; 0x37
    1e08:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <LCD_sendCommand+0x56a>
    1e2c:	80 e9       	ldi	r24, 0x90	; 144
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	9e a7       	std	Y+46, r25	; 0x2e
    1e32:	8d a7       	std	Y+45, r24	; 0x2d
    1e34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_sendCommand+0x558>
    1e3c:	9e a7       	std	Y+46, r25	; 0x2e
    1e3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e42:	98 a9       	ldd	r25, Y+48	; 0x30
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	98 ab       	std	Y+48, r25	; 0x30
    1e48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <LCD_sendCommand+0x54c>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	69 a9       	ldd	r22, Y+49	; 0x31
    1e56:	7a a9       	ldd	r23, Y+50	; 0x32
    1e58:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	98 ab       	std	Y+48, r25	; 0x30
    1e66:	8f a7       	std	Y+47, r24	; 0x2f
    1e68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6c:	9c a7       	std	Y+44, r25	; 0x2c
    1e6e:	8b a7       	std	Y+43, r24	; 0x2b
    1e70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_sendCommand+0x594>
    1e78:	9c a7       	std	Y+44, r25	; 0x2c
    1e7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e8       	ldi	r26, 0x80	; 128
    1e8c:	bf e3       	ldi	r27, 0x3F	; 63
    1e8e:	8f a3       	std	Y+39, r24	; 0x27
    1e90:	98 a7       	std	Y+40, r25	; 0x28
    1e92:	a9 a7       	std	Y+41, r26	; 0x29
    1e94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	6f a1       	ldd	r22, Y+39	; 0x27
    1e98:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a e7       	ldi	r20, 0x7A	; 122
    1ea4:	55 e4       	ldi	r21, 0x45	; 69
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8b a3       	std	Y+35, r24	; 0x23
    1eb0:	9c a3       	std	Y+36, r25	; 0x24
    1eb2:	ad a3       	std	Y+37, r26	; 0x25
    1eb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eba:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9a a3       	std	Y+34, r25	; 0x22
    1ed4:	89 a3       	std	Y+33, r24	; 0x21
    1ed6:	3f c0       	rjmp	.+126    	; 0x1f56 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	4c f5       	brge	.+82     	; 0x1f42 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <LCD_sendCommand+0x658>
    1f1a:	80 e9       	ldi	r24, 0x90	; 144
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	98 a3       	std	Y+32, r25	; 0x20
    1f20:	8f 8f       	std	Y+31, r24	; 0x1f
    1f22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f24:	98 a1       	ldd	r25, Y+32	; 0x20
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_sendCommand+0x646>
    1f2a:	98 a3       	std	Y+32, r25	; 0x20
    1f2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f30:	9a a1       	ldd	r25, Y+34	; 0x22
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9a a3       	std	Y+34, r25	; 0x22
    1f36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <LCD_sendCommand+0x63a>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f42:	6b a1       	ldd	r22, Y+35	; 0x23
    1f44:	7c a1       	ldd	r23, Y+36	; 0x24
    1f46:	8d a1       	ldd	r24, Y+37	; 0x25
    1f48:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9a a3       	std	Y+34, r25	; 0x22
    1f54:	89 a3       	std	Y+33, r24	; 0x21
    1f56:	89 a1       	ldd	r24, Y+33	; 0x21
    1f58:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_sendCommand+0x682>
    1f66:	9e 8f       	std	Y+30, r25	; 0x1e
    1f68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ed 59       	subi	r30, 0x9D	; 157
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	98 2f       	mov	r25, r24
    1f74:	91 70       	andi	r25, 0x01	; 1
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	63 e0       	ldi	r22, 0x03	; 3
    1f7a:	49 2f       	mov	r20, r25
    1f7c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1f80:	fe 01       	movw	r30, r28
    1f82:	ed 59       	subi	r30, 0x9D	; 157
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	82 70       	andi	r24, 0x02	; 2
    1f8e:	90 70       	andi	r25, 0x00	; 0
    1f90:	95 95       	asr	r25
    1f92:	87 95       	ror	r24
    1f94:	98 2f       	mov	r25, r24
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	64 e0       	ldi	r22, 0x04	; 4
    1f9a:	49 2f       	mov	r20, r25
    1f9c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ed 59       	subi	r30, 0x9D	; 157
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	84 70       	andi	r24, 0x04	; 4
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	95 95       	asr	r25
    1fb2:	87 95       	ror	r24
    1fb4:	95 95       	asr	r25
    1fb6:	87 95       	ror	r24
    1fb8:	98 2f       	mov	r25, r24
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	65 e0       	ldi	r22, 0x05	; 5
    1fbe:	49 2f       	mov	r20, r25
    1fc0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ed 59       	subi	r30, 0x9D	; 157
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	88 70       	andi	r24, 0x08	; 8
    1fd2:	90 70       	andi	r25, 0x00	; 0
    1fd4:	95 95       	asr	r25
    1fd6:	87 95       	ror	r24
    1fd8:	95 95       	asr	r25
    1fda:	87 95       	ror	r24
    1fdc:	95 95       	asr	r25
    1fde:	87 95       	ror	r24
    1fe0:	98 2f       	mov	r25, r24
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	66 e0       	ldi	r22, 0x06	; 6
    1fe6:	49 2f       	mov	r20, r25
    1fe8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a0 e8       	ldi	r26, 0x80	; 128
    1ff2:	bf e3       	ldi	r27, 0x3F	; 63
    1ff4:	89 8f       	std	Y+25, r24	; 0x19
    1ff6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff8:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a e7       	ldi	r20, 0x7A	; 122
    200a:	55 e4       	ldi	r21, 0x45	; 69
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8d 8b       	std	Y+21, r24	; 0x15
    2016:	9e 8b       	std	Y+22, r25	; 0x16
    2018:	af 8b       	std	Y+23, r26	; 0x17
    201a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <LCD_sendCommand+0x75e>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    203e:	6d 89       	ldd	r22, Y+21	; 0x15
    2040:	7e 89       	ldd	r23, Y+22	; 0x16
    2042:	8f 89       	ldd	r24, Y+23	; 0x17
    2044:	98 8d       	ldd	r25, Y+24	; 0x18
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	69 8d       	ldd	r22, Y+25	; 0x19
    2058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
    207e:	0f c0       	rjmp	.+30     	; 0x209e <LCD_sendCommand+0x7be>
    2080:	80 e9       	ldi	r24, 0x90	; 144
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	9a 8b       	std	Y+18, r25	; 0x12
    2086:	89 8b       	std	Y+17, r24	; 0x11
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	9a 89       	ldd	r25, Y+18	; 0x12
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LCD_sendCommand+0x7ac>
    2090:	9a 8b       	std	Y+18, r25	; 0x12
    2092:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	9c 89       	ldd	r25, Y+20	; 0x14
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9c 8b       	std	Y+20, r25	; 0x14
    209c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	8b 89       	ldd	r24, Y+19	; 0x13
    20a0:	9c 89       	ldd	r25, Y+20	; 0x14
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <LCD_sendCommand+0x7a0>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	98 8b       	std	Y+16, r25	; 0x10
    20c2:	8f 87       	std	Y+15, r24	; 0x0f
    20c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c6:	98 89       	ldd	r25, Y+16	; 0x10
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_sendCommand+0x7e8>
    20cc:	98 8b       	std	Y+16, r25	; 0x10
    20ce:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	62 e0       	ldi	r22, 0x02	; 2
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e8       	ldi	r26, 0x80	; 128
    20e0:	bf e3       	ldi	r27, 0x3F	; 63
    20e2:	8b 87       	std	Y+11, r24	; 0x0b
    20e4:	9c 87       	std	Y+12, r25	; 0x0c
    20e6:	ad 87       	std	Y+13, r26	; 0x0d
    20e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	55 e4       	ldi	r21, 0x45	; 69
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8f 83       	std	Y+7, r24	; 0x07
    2104:	98 87       	std	Y+8, r25	; 0x08
    2106:	a9 87       	std	Y+9, r26	; 0x09
    2108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	0f c0       	rjmp	.+30     	; 0x218c <LCD_sendCommand+0x8ac>
    216e:	80 e9       	ldi	r24, 0x90	; 144
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	9c 83       	std	Y+4, r25	; 0x04
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_sendCommand+0x89a>
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <LCD_sendCommand+0x88e>
    2194:	14 c0       	rjmp	.+40     	; 0x21be <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_sendCommand+0x8d6>
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21be:	cd 59       	subi	r28, 0x9D	; 157
    21c0:	df 4f       	sbci	r29, 0xFF	; 255
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret

000021d6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	c3 56       	subi	r28, 0x63	; 99
    21e4:	d0 40       	sbci	r29, 0x00	; 0
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	fe 01       	movw	r30, r28
    21f2:	ed 59       	subi	r30, 0x9D	; 157
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	41 e0       	ldi	r20, 0x01	; 1
    21fe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    2202:	fe 01       	movw	r30, r28
    2204:	e1 5a       	subi	r30, 0xA1	; 161
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e8       	ldi	r26, 0x80	; 128
    220e:	bf e3       	ldi	r27, 0x3F	; 63
    2210:	80 83       	st	Z, r24
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	a2 83       	std	Z+2, r26	; 0x02
    2216:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	8e 01       	movw	r16, r28
    221a:	05 5a       	subi	r16, 0xA5	; 165
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	fe 01       	movw	r30, r28
    2220:	e1 5a       	subi	r30, 0xA1	; 161
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a e7       	ldi	r20, 0x7A	; 122
    2232:	55 e4       	ldi	r21, 0x45	; 69
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	f8 01       	movw	r30, r16
    223e:	80 83       	st	Z, r24
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	a2 83       	std	Z+2, r26	; 0x02
    2244:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2246:	fe 01       	movw	r30, r28
    2248:	e5 5a       	subi	r30, 0xA5	; 165
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	44 f4       	brge	.+16     	; 0x2274 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2264:	fe 01       	movw	r30, r28
    2266:	e7 5a       	subi	r30, 0xA7	; 167
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
    2272:	64 c0       	rjmp	.+200    	; 0x233c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2274:	fe 01       	movw	r30, r28
    2276:	e5 5a       	subi	r30, 0xA5	; 165
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	0c f0       	brlt	.+2      	; 0x2294 <LCD_displayCharacter+0xbe>
    2292:	43 c0       	rjmp	.+134    	; 0x231a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2294:	fe 01       	movw	r30, r28
    2296:	e1 5a       	subi	r30, 0xA1	; 161
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e2       	ldi	r20, 0x20	; 32
    22a8:	51 e4       	ldi	r21, 0x41	; 65
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8e 01       	movw	r16, r28
    22b4:	07 5a       	subi	r16, 0xA7	; 167
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	f8 01       	movw	r30, r16
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    22ca:	1f c0       	rjmp	.+62     	; 0x230a <LCD_displayCharacter+0x134>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e9 5a       	subi	r30, 0xA9	; 169
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 e9       	ldi	r24, 0x90	; 144
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	fe 01       	movw	r30, r28
    22dc:	e9 5a       	subi	r30, 0xA9	; 169
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_displayCharacter+0x10e>
    22e8:	fe 01       	movw	r30, r28
    22ea:	e9 5a       	subi	r30, 0xA9	; 169
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	de 01       	movw	r26, r28
    22f4:	a7 5a       	subi	r26, 0xA7	; 167
    22f6:	bf 4f       	sbci	r27, 0xFF	; 255
    22f8:	fe 01       	movw	r30, r28
    22fa:	e7 5a       	subi	r30, 0xA7	; 167
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	80 81       	ld	r24, Z
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	11 96       	adiw	r26, 0x01	; 1
    2306:	9c 93       	st	X, r25
    2308:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	fe 01       	movw	r30, r28
    230c:	e7 5a       	subi	r30, 0xA7	; 167
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	d1 f6       	brne	.-76     	; 0x22cc <LCD_displayCharacter+0xf6>
    2318:	27 c0       	rjmp	.+78     	; 0x2368 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	8e 01       	movw	r16, r28
    231c:	07 5a       	subi	r16, 0xA7	; 167
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	fe 01       	movw	r30, r28
    2322:	e5 5a       	subi	r30, 0xA5	; 165
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	f8 01       	movw	r30, r16
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	de 01       	movw	r26, r28
    233e:	ab 5a       	subi	r26, 0xAB	; 171
    2340:	bf 4f       	sbci	r27, 0xFF	; 255
    2342:	fe 01       	movw	r30, r28
    2344:	e7 5a       	subi	r30, 0xA7	; 167
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	8d 93       	st	X+, r24
    234e:	9c 93       	st	X, r25
    2350:	fe 01       	movw	r30, r28
    2352:	eb 5a       	subi	r30, 0xAB	; 171
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_displayCharacter+0x184>
    235e:	fe 01       	movw	r30, r28
    2360:	eb 5a       	subi	r30, 0xAB	; 171
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	62 e0       	ldi	r22, 0x02	; 2
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    2372:	fe 01       	movw	r30, r28
    2374:	ef 5a       	subi	r30, 0xAF	; 175
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e8       	ldi	r26, 0x80	; 128
    237e:	bf e3       	ldi	r27, 0x3F	; 63
    2380:	80 83       	st	Z, r24
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	a2 83       	std	Z+2, r26	; 0x02
    2386:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2388:	8e 01       	movw	r16, r28
    238a:	03 5b       	subi	r16, 0xB3	; 179
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	ef 5a       	subi	r30, 0xAF	; 175
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a e7       	ldi	r20, 0x7A	; 122
    23a2:	55 e4       	ldi	r21, 0x45	; 69
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	f8 01       	movw	r30, r16
    23ae:	80 83       	st	Z, r24
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	a2 83       	std	Z+2, r26	; 0x02
    23b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b6:	fe 01       	movw	r30, r28
    23b8:	e3 5b       	subi	r30, 0xB3	; 179
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	44 f4       	brge	.+16     	; 0x23e4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    23d4:	fe 01       	movw	r30, r28
    23d6:	e5 5b       	subi	r30, 0xB5	; 181
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24
    23e2:	64 c0       	rjmp	.+200    	; 0x24ac <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    23e4:	fe 01       	movw	r30, r28
    23e6:	e3 5b       	subi	r30, 0xB3	; 179
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	0c f0       	brlt	.+2      	; 0x2404 <LCD_displayCharacter+0x22e>
    2402:	43 c0       	rjmp	.+134    	; 0x248a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	fe 01       	movw	r30, r28
    2406:	ef 5a       	subi	r30, 0xAF	; 175
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8e 01       	movw	r16, r28
    2424:	05 5b       	subi	r16, 0xB5	; 181
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	f8 01       	movw	r30, r16
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
    243a:	1f c0       	rjmp	.+62     	; 0x247a <LCD_displayCharacter+0x2a4>
    243c:	fe 01       	movw	r30, r28
    243e:	e7 5b       	subi	r30, 0xB7	; 183
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 e9       	ldi	r24, 0x90	; 144
    2444:	91 e0       	ldi	r25, 0x01	; 1
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
    244a:	fe 01       	movw	r30, r28
    244c:	e7 5b       	subi	r30, 0xB7	; 183
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_displayCharacter+0x27e>
    2458:	fe 01       	movw	r30, r28
    245a:	e7 5b       	subi	r30, 0xB7	; 183
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	de 01       	movw	r26, r28
    2464:	a5 5b       	subi	r26, 0xB5	; 181
    2466:	bf 4f       	sbci	r27, 0xFF	; 255
    2468:	fe 01       	movw	r30, r28
    246a:	e5 5b       	subi	r30, 0xB5	; 181
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 81       	ld	r24, Z
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	11 96       	adiw	r26, 0x01	; 1
    2476:	9c 93       	st	X, r25
    2478:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	fe 01       	movw	r30, r28
    247c:	e5 5b       	subi	r30, 0xB5	; 181
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	d1 f6       	brne	.-76     	; 0x243c <LCD_displayCharacter+0x266>
    2488:	27 c0       	rjmp	.+78     	; 0x24d8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	8e 01       	movw	r16, r28
    248c:	05 5b       	subi	r16, 0xB5	; 181
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e3 5b       	subi	r30, 0xB3	; 179
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	f8 01       	movw	r30, r16
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
    24ac:	de 01       	movw	r26, r28
    24ae:	a9 5b       	subi	r26, 0xB9	; 185
    24b0:	bf 4f       	sbci	r27, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e5 5b       	subi	r30, 0xB5	; 181
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	8d 93       	st	X+, r24
    24be:	9c 93       	st	X, r25
    24c0:	fe 01       	movw	r30, r28
    24c2:	e9 5b       	subi	r30, 0xB9	; 185
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <LCD_displayCharacter+0x2f4>
    24ce:	fe 01       	movw	r30, r28
    24d0:	e9 5b       	subi	r30, 0xB9	; 185
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    24d8:	fe 01       	movw	r30, r28
    24da:	ed 59       	subi	r30, 0x9D	; 157
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 81       	ld	r24, Z
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	80 71       	andi	r24, 0x10	; 16
    24e6:	90 70       	andi	r25, 0x00	; 0
    24e8:	95 95       	asr	r25
    24ea:	87 95       	ror	r24
    24ec:	95 95       	asr	r25
    24ee:	87 95       	ror	r24
    24f0:	95 95       	asr	r25
    24f2:	87 95       	ror	r24
    24f4:	95 95       	asr	r25
    24f6:	87 95       	ror	r24
    24f8:	98 2f       	mov	r25, r24
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	63 e0       	ldi	r22, 0x03	; 3
    24fe:	49 2f       	mov	r20, r25
    2500:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2504:	fe 01       	movw	r30, r28
    2506:	ed 59       	subi	r30, 0x9D	; 157
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	80 72       	andi	r24, 0x20	; 32
    2512:	90 70       	andi	r25, 0x00	; 0
    2514:	95 95       	asr	r25
    2516:	87 95       	ror	r24
    2518:	95 95       	asr	r25
    251a:	87 95       	ror	r24
    251c:	95 95       	asr	r25
    251e:	87 95       	ror	r24
    2520:	95 95       	asr	r25
    2522:	87 95       	ror	r24
    2524:	95 95       	asr	r25
    2526:	87 95       	ror	r24
    2528:	98 2f       	mov	r25, r24
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	64 e0       	ldi	r22, 0x04	; 4
    252e:	49 2f       	mov	r20, r25
    2530:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2534:	fe 01       	movw	r30, r28
    2536:	ed 59       	subi	r30, 0x9D	; 157
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	88 2f       	mov	r24, r24
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	80 74       	andi	r24, 0x40	; 64
    2542:	90 70       	andi	r25, 0x00	; 0
    2544:	08 2e       	mov	r0, r24
    2546:	89 2f       	mov	r24, r25
    2548:	00 0c       	add	r0, r0
    254a:	88 1f       	adc	r24, r24
    254c:	99 0b       	sbc	r25, r25
    254e:	00 0c       	add	r0, r0
    2550:	88 1f       	adc	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	98 2f       	mov	r25, r24
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	65 e0       	ldi	r22, 0x05	; 5
    255a:	49 2f       	mov	r20, r25
    255c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2560:	fe 01       	movw	r30, r28
    2562:	ed 59       	subi	r30, 0x9D	; 157
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	98 2f       	mov	r25, r24
    256a:	99 1f       	adc	r25, r25
    256c:	99 27       	eor	r25, r25
    256e:	99 1f       	adc	r25, r25
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	66 e0       	ldi	r22, 0x06	; 6
    2574:	49 2f       	mov	r20, r25
    2576:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    257a:	fe 01       	movw	r30, r28
    257c:	ed 5b       	subi	r30, 0xBD	; 189
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a0 e8       	ldi	r26, 0x80	; 128
    2586:	bf e3       	ldi	r27, 0x3F	; 63
    2588:	80 83       	st	Z, r24
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	a2 83       	std	Z+2, r26	; 0x02
    258e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	8e 01       	movw	r16, r28
    2592:	01 5c       	subi	r16, 0xC1	; 193
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	ed 5b       	subi	r30, 0xBD	; 189
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a e7       	ldi	r20, 0x7A	; 122
    25aa:	55 e4       	ldi	r21, 0x45	; 69
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25be:	fe 01       	movw	r30, r28
    25c0:	ff 96       	adiw	r30, 0x3f	; 63
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9e af       	std	Y+62, r25	; 0x3e
    25e0:	8d af       	std	Y+61, r24	; 0x3d
    25e2:	46 c0       	rjmp	.+140    	; 0x2670 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    25e4:	fe 01       	movw	r30, r28
    25e6:	ff 96       	adiw	r30, 0x3f	; 63
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	57 e4       	ldi	r21, 0x47	; 71
    25f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	64 f5       	brge	.+88     	; 0x2658 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	fe 01       	movw	r30, r28
    2602:	ed 5b       	subi	r30, 0xBD	; 189
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e af       	std	Y+62, r25	; 0x3e
    262c:	8d af       	std	Y+61, r24	; 0x3d
    262e:	0f c0       	rjmp	.+30     	; 0x264e <LCD_displayCharacter+0x478>
    2630:	80 e9       	ldi	r24, 0x90	; 144
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	9c af       	std	Y+60, r25	; 0x3c
    2636:	8b af       	std	Y+59, r24	; 0x3b
    2638:	8b ad       	ldd	r24, Y+59	; 0x3b
    263a:	9c ad       	ldd	r25, Y+60	; 0x3c
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_displayCharacter+0x466>
    2640:	9c af       	std	Y+60, r25	; 0x3c
    2642:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	8d ad       	ldd	r24, Y+61	; 0x3d
    2646:	9e ad       	ldd	r25, Y+62	; 0x3e
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9e af       	std	Y+62, r25	; 0x3e
    264c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2650:	9e ad       	ldd	r25, Y+62	; 0x3e
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <LCD_displayCharacter+0x45a>
    2656:	16 c0       	rjmp	.+44     	; 0x2684 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	fe 01       	movw	r30, r28
    265a:	ff 96       	adiw	r30, 0x3f	; 63
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9e af       	std	Y+62, r25	; 0x3e
    266e:	8d af       	std	Y+61, r24	; 0x3d
    2670:	8d ad       	ldd	r24, Y+61	; 0x3d
    2672:	9e ad       	ldd	r25, Y+62	; 0x3e
    2674:	9a af       	std	Y+58, r25	; 0x3a
    2676:	89 af       	std	Y+57, r24	; 0x39
    2678:	89 ad       	ldd	r24, Y+57	; 0x39
    267a:	9a ad       	ldd	r25, Y+58	; 0x3a
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_displayCharacter+0x4a6>
    2680:	9a af       	std	Y+58, r25	; 0x3a
    2682:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	62 e0       	ldi	r22, 0x02	; 2
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	a0 e8       	ldi	r26, 0x80	; 128
    2694:	bf e3       	ldi	r27, 0x3F	; 63
    2696:	8d ab       	std	Y+53, r24	; 0x35
    2698:	9e ab       	std	Y+54, r25	; 0x36
    269a:	af ab       	std	Y+55, r26	; 0x37
    269c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	6d a9       	ldd	r22, Y+53	; 0x35
    26a0:	7e a9       	ldd	r23, Y+54	; 0x36
    26a2:	8f a9       	ldd	r24, Y+55	; 0x37
    26a4:	98 ad       	ldd	r25, Y+56	; 0x38
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a e7       	ldi	r20, 0x7A	; 122
    26ac:	55 e4       	ldi	r21, 0x45	; 69
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	89 ab       	std	Y+49, r24	; 0x31
    26b8:	9a ab       	std	Y+50, r25	; 0x32
    26ba:	ab ab       	std	Y+51, r26	; 0x33
    26bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26be:	69 a9       	ldd	r22, Y+49	; 0x31
    26c0:	7a a9       	ldd	r23, Y+50	; 0x32
    26c2:	8b a9       	ldd	r24, Y+51	; 0x33
    26c4:	9c a9       	ldd	r25, Y+52	; 0x34
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	98 ab       	std	Y+48, r25	; 0x30
    26dc:	8f a7       	std	Y+47, r24	; 0x2f
    26de:	3f c0       	rjmp	.+126    	; 0x275e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    26e0:	69 a9       	ldd	r22, Y+49	; 0x31
    26e2:	7a a9       	ldd	r23, Y+50	; 0x32
    26e4:	8b a9       	ldd	r24, Y+51	; 0x33
    26e6:	9c a9       	ldd	r25, Y+52	; 0x34
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	3f ef       	ldi	r19, 0xFF	; 255
    26ec:	4f e7       	ldi	r20, 0x7F	; 127
    26ee:	57 e4       	ldi	r21, 0x47	; 71
    26f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f4:	18 16       	cp	r1, r24
    26f6:	4c f5       	brge	.+82     	; 0x274a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f8:	6d a9       	ldd	r22, Y+53	; 0x35
    26fa:	7e a9       	ldd	r23, Y+54	; 0x36
    26fc:	8f a9       	ldd	r24, Y+55	; 0x37
    26fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e2       	ldi	r20, 0x20	; 32
    2706:	51 e4       	ldi	r21, 0x41	; 65
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	98 ab       	std	Y+48, r25	; 0x30
    271e:	8f a7       	std	Y+47, r24	; 0x2f
    2720:	0f c0       	rjmp	.+30     	; 0x2740 <LCD_displayCharacter+0x56a>
    2722:	80 e9       	ldi	r24, 0x90	; 144
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	9e a7       	std	Y+46, r25	; 0x2e
    2728:	8d a7       	std	Y+45, r24	; 0x2d
    272a:	8d a5       	ldd	r24, Y+45	; 0x2d
    272c:	9e a5       	ldd	r25, Y+46	; 0x2e
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_displayCharacter+0x558>
    2732:	9e a7       	std	Y+46, r25	; 0x2e
    2734:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	98 ab       	std	Y+48, r25	; 0x30
    273e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	8f a5       	ldd	r24, Y+47	; 0x2f
    2742:	98 a9       	ldd	r25, Y+48	; 0x30
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	69 f7       	brne	.-38     	; 0x2722 <LCD_displayCharacter+0x54c>
    2748:	14 c0       	rjmp	.+40     	; 0x2772 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	69 a9       	ldd	r22, Y+49	; 0x31
    274c:	7a a9       	ldd	r23, Y+50	; 0x32
    274e:	8b a9       	ldd	r24, Y+51	; 0x33
    2750:	9c a9       	ldd	r25, Y+52	; 0x34
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	98 ab       	std	Y+48, r25	; 0x30
    275c:	8f a7       	std	Y+47, r24	; 0x2f
    275e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2760:	98 a9       	ldd	r25, Y+48	; 0x30
    2762:	9c a7       	std	Y+44, r25	; 0x2c
    2764:	8b a7       	std	Y+43, r24	; 0x2b
    2766:	8b a5       	ldd	r24, Y+43	; 0x2b
    2768:	9c a5       	ldd	r25, Y+44	; 0x2c
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <LCD_displayCharacter+0x594>
    276e:	9c a7       	std	Y+44, r25	; 0x2c
    2770:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	62 e0       	ldi	r22, 0x02	; 2
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 e8       	ldi	r26, 0x80	; 128
    2782:	bf e3       	ldi	r27, 0x3F	; 63
    2784:	8f a3       	std	Y+39, r24	; 0x27
    2786:	98 a7       	std	Y+40, r25	; 0x28
    2788:	a9 a7       	std	Y+41, r26	; 0x29
    278a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	6f a1       	ldd	r22, Y+39	; 0x27
    278e:	78 a5       	ldd	r23, Y+40	; 0x28
    2790:	89 a5       	ldd	r24, Y+41	; 0x29
    2792:	9a a5       	ldd	r25, Y+42	; 0x2a
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a e7       	ldi	r20, 0x7A	; 122
    279a:	55 e4       	ldi	r21, 0x45	; 69
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8b a3       	std	Y+35, r24	; 0x23
    27a6:	9c a3       	std	Y+36, r25	; 0x24
    27a8:	ad a3       	std	Y+37, r26	; 0x25
    27aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27ac:	6b a1       	ldd	r22, Y+35	; 0x23
    27ae:	7c a1       	ldd	r23, Y+36	; 0x24
    27b0:	8d a1       	ldd	r24, Y+37	; 0x25
    27b2:	9e a1       	ldd	r25, Y+38	; 0x26
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9a a3       	std	Y+34, r25	; 0x22
    27ca:	89 a3       	std	Y+33, r24	; 0x21
    27cc:	3f c0       	rjmp	.+126    	; 0x284c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    27ce:	6b a1       	ldd	r22, Y+35	; 0x23
    27d0:	7c a1       	ldd	r23, Y+36	; 0x24
    27d2:	8d a1       	ldd	r24, Y+37	; 0x25
    27d4:	9e a1       	ldd	r25, Y+38	; 0x26
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	4c f5       	brge	.+82     	; 0x2838 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e6:	6f a1       	ldd	r22, Y+39	; 0x27
    27e8:	78 a5       	ldd	r23, Y+40	; 0x28
    27ea:	89 a5       	ldd	r24, Y+41	; 0x29
    27ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9a a3       	std	Y+34, r25	; 0x22
    280c:	89 a3       	std	Y+33, r24	; 0x21
    280e:	0f c0       	rjmp	.+30     	; 0x282e <LCD_displayCharacter+0x658>
    2810:	80 e9       	ldi	r24, 0x90	; 144
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	98 a3       	std	Y+32, r25	; 0x20
    2816:	8f 8f       	std	Y+31, r24	; 0x1f
    2818:	8f 8d       	ldd	r24, Y+31	; 0x1f
    281a:	98 a1       	ldd	r25, Y+32	; 0x20
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_displayCharacter+0x646>
    2820:	98 a3       	std	Y+32, r25	; 0x20
    2822:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	89 a1       	ldd	r24, Y+33	; 0x21
    2826:	9a a1       	ldd	r25, Y+34	; 0x22
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	9a a3       	std	Y+34, r25	; 0x22
    282c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	89 a1       	ldd	r24, Y+33	; 0x21
    2830:	9a a1       	ldd	r25, Y+34	; 0x22
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	69 f7       	brne	.-38     	; 0x2810 <LCD_displayCharacter+0x63a>
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	6b a1       	ldd	r22, Y+35	; 0x23
    283a:	7c a1       	ldd	r23, Y+36	; 0x24
    283c:	8d a1       	ldd	r24, Y+37	; 0x25
    283e:	9e a1       	ldd	r25, Y+38	; 0x26
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9a a3       	std	Y+34, r25	; 0x22
    284a:	89 a3       	std	Y+33, r24	; 0x21
    284c:	89 a1       	ldd	r24, Y+33	; 0x21
    284e:	9a a1       	ldd	r25, Y+34	; 0x22
    2850:	9e 8f       	std	Y+30, r25	; 0x1e
    2852:	8d 8f       	std	Y+29, r24	; 0x1d
    2854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2856:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_displayCharacter+0x682>
    285c:	9e 8f       	std	Y+30, r25	; 0x1e
    285e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2860:	fe 01       	movw	r30, r28
    2862:	ed 59       	subi	r30, 0x9D	; 157
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	98 2f       	mov	r25, r24
    286a:	91 70       	andi	r25, 0x01	; 1
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	63 e0       	ldi	r22, 0x03	; 3
    2870:	49 2f       	mov	r20, r25
    2872:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2876:	fe 01       	movw	r30, r28
    2878:	ed 59       	subi	r30, 0x9D	; 157
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	88 2f       	mov	r24, r24
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	82 70       	andi	r24, 0x02	; 2
    2884:	90 70       	andi	r25, 0x00	; 0
    2886:	95 95       	asr	r25
    2888:	87 95       	ror	r24
    288a:	98 2f       	mov	r25, r24
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	64 e0       	ldi	r22, 0x04	; 4
    2890:	49 2f       	mov	r20, r25
    2892:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2896:	fe 01       	movw	r30, r28
    2898:	ed 59       	subi	r30, 0x9D	; 157
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	84 70       	andi	r24, 0x04	; 4
    28a4:	90 70       	andi	r25, 0x00	; 0
    28a6:	95 95       	asr	r25
    28a8:	87 95       	ror	r24
    28aa:	95 95       	asr	r25
    28ac:	87 95       	ror	r24
    28ae:	98 2f       	mov	r25, r24
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	65 e0       	ldi	r22, 0x05	; 5
    28b4:	49 2f       	mov	r20, r25
    28b6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 59       	subi	r30, 0x9D	; 157
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	88 2f       	mov	r24, r24
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	88 70       	andi	r24, 0x08	; 8
    28c8:	90 70       	andi	r25, 0x00	; 0
    28ca:	95 95       	asr	r25
    28cc:	87 95       	ror	r24
    28ce:	95 95       	asr	r25
    28d0:	87 95       	ror	r24
    28d2:	95 95       	asr	r25
    28d4:	87 95       	ror	r24
    28d6:	98 2f       	mov	r25, r24
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	66 e0       	ldi	r22, 0x06	; 6
    28dc:	49 2f       	mov	r20, r25
    28de:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	a0 e8       	ldi	r26, 0x80	; 128
    28e8:	bf e3       	ldi	r27, 0x3F	; 63
    28ea:	89 8f       	std	Y+25, r24	; 0x19
    28ec:	9a 8f       	std	Y+26, r25	; 0x1a
    28ee:	ab 8f       	std	Y+27, r26	; 0x1b
    28f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	69 8d       	ldd	r22, Y+25	; 0x19
    28f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a e7       	ldi	r20, 0x7A	; 122
    2900:	55 e4       	ldi	r21, 0x45	; 69
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8d 8b       	std	Y+21, r24	; 0x15
    290c:	9e 8b       	std	Y+22, r25	; 0x16
    290e:	af 8b       	std	Y+23, r26	; 0x17
    2910:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2912:	6d 89       	ldd	r22, Y+21	; 0x15
    2914:	7e 89       	ldd	r23, Y+22	; 0x16
    2916:	8f 89       	ldd	r24, Y+23	; 0x17
    2918:	98 8d       	ldd	r25, Y+24	; 0x18
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	2c f4       	brge	.+10     	; 0x2934 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9c 8b       	std	Y+20, r25	; 0x14
    2930:	8b 8b       	std	Y+19, r24	; 0x13
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2934:	6d 89       	ldd	r22, Y+21	; 0x15
    2936:	7e 89       	ldd	r23, Y+22	; 0x16
    2938:	8f 89       	ldd	r24, Y+23	; 0x17
    293a:	98 8d       	ldd	r25, Y+24	; 0x18
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	4c f5       	brge	.+82     	; 0x299e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	69 8d       	ldd	r22, Y+25	; 0x19
    294e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9c 8b       	std	Y+20, r25	; 0x14
    2972:	8b 8b       	std	Y+19, r24	; 0x13
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <LCD_displayCharacter+0x7be>
    2976:	80 e9       	ldi	r24, 0x90	; 144
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	9a 8b       	std	Y+18, r25	; 0x12
    297c:	89 8b       	std	Y+17, r24	; 0x11
    297e:	89 89       	ldd	r24, Y+17	; 0x11
    2980:	9a 89       	ldd	r25, Y+18	; 0x12
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <LCD_displayCharacter+0x7ac>
    2986:	9a 8b       	std	Y+18, r25	; 0x12
    2988:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	8b 89       	ldd	r24, Y+19	; 0x13
    298c:	9c 89       	ldd	r25, Y+20	; 0x14
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	9c 8b       	std	Y+20, r25	; 0x14
    2992:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2994:	8b 89       	ldd	r24, Y+19	; 0x13
    2996:	9c 89       	ldd	r25, Y+20	; 0x14
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	69 f7       	brne	.-38     	; 0x2976 <LCD_displayCharacter+0x7a0>
    299c:	14 c0       	rjmp	.+40     	; 0x29c6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	6d 89       	ldd	r22, Y+21	; 0x15
    29a0:	7e 89       	ldd	r23, Y+22	; 0x16
    29a2:	8f 89       	ldd	r24, Y+23	; 0x17
    29a4:	98 8d       	ldd	r25, Y+24	; 0x18
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9c 8b       	std	Y+20, r25	; 0x14
    29b0:	8b 8b       	std	Y+19, r24	; 0x13
    29b2:	8b 89       	ldd	r24, Y+19	; 0x13
    29b4:	9c 89       	ldd	r25, Y+20	; 0x14
    29b6:	98 8b       	std	Y+16, r25	; 0x10
    29b8:	8f 87       	std	Y+15, r24	; 0x0f
    29ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    29bc:	98 89       	ldd	r25, Y+16	; 0x10
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_displayCharacter+0x7e8>
    29c2:	98 8b       	std	Y+16, r25	; 0x10
    29c4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	62 e0       	ldi	r22, 0x02	; 2
    29ca:	40 e0       	ldi	r20, 0x00	; 0
    29cc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	a0 e8       	ldi	r26, 0x80	; 128
    29d6:	bf e3       	ldi	r27, 0x3F	; 63
    29d8:	8b 87       	std	Y+11, r24	; 0x0b
    29da:	9c 87       	std	Y+12, r25	; 0x0c
    29dc:	ad 87       	std	Y+13, r26	; 0x0d
    29de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	4a e7       	ldi	r20, 0x7A	; 122
    29ee:	55 e4       	ldi	r21, 0x45	; 69
    29f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	8f 83       	std	Y+7, r24	; 0x07
    29fa:	98 87       	std	Y+8, r25	; 0x08
    29fc:	a9 87       	std	Y+9, r26	; 0x09
    29fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	5f e3       	ldi	r21, 0x3F	; 63
    2a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a14:	88 23       	and	r24, r24
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	3f c0       	rjmp	.+126    	; 0x2aa0 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2a22:	6f 81       	ldd	r22, Y+7	; 0x07
    2a24:	78 85       	ldd	r23, Y+8	; 0x08
    2a26:	89 85       	ldd	r24, Y+9	; 0x09
    2a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	3f ef       	ldi	r19, 0xFF	; 255
    2a2e:	4f e7       	ldi	r20, 0x7F	; 127
    2a30:	57 e4       	ldi	r21, 0x47	; 71
    2a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a36:	18 16       	cp	r1, r24
    2a38:	4c f5       	brge	.+82     	; 0x2a8c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e2       	ldi	r20, 0x20	; 32
    2a48:	51 e4       	ldi	r21, 0x41	; 65
    2a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9e 83       	std	Y+6, r25	; 0x06
    2a60:	8d 83       	std	Y+5, r24	; 0x05
    2a62:	0f c0       	rjmp	.+30     	; 0x2a82 <LCD_displayCharacter+0x8ac>
    2a64:	80 e9       	ldi	r24, 0x90	; 144
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	9c 83       	std	Y+4, r25	; 0x04
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_displayCharacter+0x89a>
    2a74:	9c 83       	std	Y+4, r25	; 0x04
    2a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	69 f7       	brne	.-38     	; 0x2a64 <LCD_displayCharacter+0x88e>
    2a8a:	14 c0       	rjmp	.+40     	; 0x2ab4 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8e:	78 85       	ldd	r23, Y+8	; 0x08
    2a90:	89 85       	ldd	r24, Y+9	; 0x09
    2a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <LCD_displayCharacter+0x8d6>
    2ab0:	9a 83       	std	Y+2, r25	; 0x02
    2ab2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ab4:	cd 59       	subi	r28, 0x9D	; 157
    2ab6:	df 4f       	sbci	r29, 0xFF	; 255
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	1f 91       	pop	r17
    2ac8:	0f 91       	pop	r16
    2aca:	08 95       	ret

00002acc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <LCD_displayString+0x6>
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	9b 83       	std	Y+3, r25	; 0x03
    2ada:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2adc:	19 82       	std	Y+1, r1	; 0x01
    2ade:	0e c0       	rjmp	.+28     	; 0x2afc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aea:	fc 01       	movw	r30, r24
    2aec:	e2 0f       	add	r30, r18
    2aee:	f3 1f       	adc	r31, r19
    2af0:	80 81       	ld	r24, Z
    2af2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_displayCharacter>
		i++;
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	8f 5f       	subi	r24, 0xFF	; 255
    2afa:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	9b 81       	ldd	r25, Y+3	; 0x03
    2b06:	fc 01       	movw	r30, r24
    2b08:	e2 0f       	add	r30, r18
    2b0a:	f3 1f       	adc	r31, r19
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 23       	and	r24, r24
    2b10:	39 f7       	brne	.-50     	; 0x2ae0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	08 95       	ret

00002b1e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	00 d0       	rcall	.+0      	; 0x2b24 <LCD_moveCursor+0x6>
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <LCD_moveCursor+0x8>
    2b26:	0f 92       	push	r0
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	8a 83       	std	Y+2, r24	; 0x02
    2b2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b30:	8a 81       	ldd	r24, Y+2	; 0x02
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	3d 83       	std	Y+5, r19	; 0x05
    2b38:	2c 83       	std	Y+4, r18	; 0x04
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	91 05       	cpc	r25, r1
    2b42:	c1 f0       	breq	.+48     	; 0x2b74 <LCD_moveCursor+0x56>
    2b44:	2c 81       	ldd	r18, Y+4	; 0x04
    2b46:	3d 81       	ldd	r19, Y+5	; 0x05
    2b48:	22 30       	cpi	r18, 0x02	; 2
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <LCD_moveCursor+0x3a>
    2b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b50:	9d 81       	ldd	r25, Y+5	; 0x05
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	61 f0       	breq	.+24     	; 0x2b6e <LCD_moveCursor+0x50>
    2b56:	19 c0       	rjmp	.+50     	; 0x2b8a <LCD_moveCursor+0x6c>
    2b58:	2c 81       	ldd	r18, Y+4	; 0x04
    2b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b5c:	22 30       	cpi	r18, 0x02	; 2
    2b5e:	31 05       	cpc	r19, r1
    2b60:	69 f0       	breq	.+26     	; 0x2b7c <LCD_moveCursor+0x5e>
    2b62:	8c 81       	ldd	r24, Y+4	; 0x04
    2b64:	9d 81       	ldd	r25, Y+5	; 0x05
    2b66:	83 30       	cpi	r24, 0x03	; 3
    2b68:	91 05       	cpc	r25, r1
    2b6a:	61 f0       	breq	.+24     	; 0x2b84 <LCD_moveCursor+0x66>
    2b6c:	0e c0       	rjmp	.+28     	; 0x2b8a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	0b c0       	rjmp	.+22     	; 0x2b8a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	80 5c       	subi	r24, 0xC0	; 192
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	07 c0       	rjmp	.+14     	; 0x2b8a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	80 5f       	subi	r24, 0xF0	; 240
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	03 c0       	rjmp	.+6      	; 0x2b8a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	80 5b       	subi	r24, 0xB0	; 176
    2b88:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	80 68       	ori	r24, 0x80	; 128
    2b8e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_sendCommand>
}
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <LCD_displayStringRowColumn+0x6>
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <LCD_displayStringRowColumn+0x8>
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	6a 83       	std	Y+2, r22	; 0x02
    2bb2:	5c 83       	std	Y+4, r21	; 0x04
    2bb4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	6a 81       	ldd	r22, Y+2	; 0x02
    2bba:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_displayString>
}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(sint16 data)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	62 97       	sbiw	r28, 0x12	; 18
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	9a 8b       	std	Y+18, r25	; 0x12
    2bea:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2bec:	89 89       	ldd	r24, Y+17	; 0x11
    2bee:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf0:	9e 01       	movw	r18, r28
    2bf2:	2f 5f       	subi	r18, 0xFF	; 255
    2bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	4a e0       	ldi	r20, 0x0A	; 10
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <itoa>
   LCD_displayString(buff); /* Display the string */
    2c00:	ce 01       	movw	r24, r28
    2c02:	01 96       	adiw	r24, 0x01	; 1
    2c04:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_displayString>
}
    2c08:	62 96       	adiw	r28, 0x12	; 18
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <LCD_longToString>:
 * Description :
 * Display the required decimal value on the screen from range  -2147483648 .. +2147483647
 * so use this function is the number is bigger than +32767 or smaller than -32768
 */
void LCD_longToString(sint32 data)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	64 97       	sbiw	r28, 0x14	; 20
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	69 8b       	std	Y+17, r22	; 0x11
    2c30:	7a 8b       	std	Y+18, r23	; 0x12
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
    2c34:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   ltoa(data,buff,10); /* Use ltoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c36:	89 89       	ldd	r24, Y+17	; 0x11
    2c38:	9a 89       	ldd	r25, Y+18	; 0x12
    2c3a:	ab 89       	ldd	r26, Y+19	; 0x13
    2c3c:	bc 89       	ldd	r27, Y+20	; 0x14
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	9e 01       	movw	r18, r28
    2c44:	2f 5f       	subi	r18, 0xFF	; 255
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	a9 01       	movw	r20, r18
    2c4a:	2a e0       	ldi	r18, 0x0A	; 10
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <ltoa>
   LCD_displayString(buff); /* Display the string */
    2c52:	ce 01       	movw	r24, r28
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_displayString>
}
    2c5a:	64 96       	adiw	r28, 0x14	; 20
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_sendCommand>
}
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <LM35_getTemperature+0x6>
    2c86:	0f 92       	push	r0
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    2c8c:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2c8e:	1a 82       	std	Y+2, r1	; 0x02
    2c90:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ADC_readChannel>
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	cc 01       	movw	r24, r24
    2ca2:	a0 e0       	ldi	r26, 0x00	; 0
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	26 e9       	ldi	r18, 0x96	; 150
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__mulsi3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	2a e0       	ldi	r18, 0x0A	; 10
    2ccc:	37 ed       	ldi	r19, 0xD7	; 215
    2cce:	43 e2       	ldi	r20, 0x23	; 35
    2cd0:	50 e4       	ldi	r21, 0x40	; 64
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	bc 01       	movw	r22, r24
    2cdc:	cd 01       	movw	r24, r26
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 ed       	ldi	r19, 0xD0	; 208
    2ce2:	4f eb       	ldi	r20, 0xBF	; 191
    2ce4:	54 e4       	ldi	r21, 0x44	; 68
    2ce6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	bc 01       	movw	r22, r24
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <main>:
#define FAN_AUTO   '8'
#define LED_AUTO   '9'

void flame_callBack();

int main(void) {
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	2d 97       	sbiw	r28, 0x0d	; 13
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
	uint8 temp;
	uint8 fan1State;
	uint8 ldr_read;
	ADC_ConfigType ADC_Configurations = {INTERNAL_VOLT, F_CPU_128};
    2d1e:	80 ec       	ldi	r24, 0xC0	; 192
    2d20:	8c 83       	std	Y+4, r24	; 0x04
    2d22:	87 e0       	ldi	r24, 0x07	; 7
    2d24:	8d 83       	std	Y+5, r24	; 0x05

	/* Enable interrupts by setting I-bit */
	SREG_REG.Bits.I_Bit = 1;
    2d26:	ef e5       	ldi	r30, 0x5F	; 95
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	80 68       	ori	r24, 0x80	; 128
    2d2e:	80 83       	st	Z, r24

	RED_LED_init();
    2d30:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <RED_LED_init>

	/* Initialize ADC driver */
	ADC_init(&ADC_Configurations);
    2d34:	ce 01       	movw	r24, r28
    2d36:	04 96       	adiw	r24, 0x04	; 4
    2d38:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>

	/* Initialize Motor driver */
	DcMOTOR_init();
    2d3c:	0e 94 90 07 	call	0xf20	; 0xf20 <DcMOTOR_init>

	/* Init Smoke sensor */
	smokeSensorConfig smoke_conf = {3, 7, DIGITAL};
    2d40:	ce 01       	movw	r24, r28
    2d42:	06 96       	adiw	r24, 0x06	; 6
    2d44:	9a 87       	std	Y+10, r25	; 0x0a
    2d46:	89 87       	std	Y+9, r24	; 0x09
    2d48:	e4 ea       	ldi	r30, 0xA4	; 164
    2d4a:	f1 e0       	ldi	r31, 0x01	; 1
    2d4c:	fc 87       	std	Y+12, r31	; 0x0c
    2d4e:	eb 87       	std	Y+11, r30	; 0x0b
    2d50:	f3 e0       	ldi	r31, 0x03	; 3
    2d52:	fd 87       	std	Y+13, r31	; 0x0d
    2d54:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d56:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d58:	00 80       	ld	r0, Z
    2d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	9c 87       	std	Y+12, r25	; 0x0c
    2d62:	8b 87       	std	Y+11, r24	; 0x0b
    2d64:	e9 85       	ldd	r30, Y+9	; 0x09
    2d66:	fa 85       	ldd	r31, Y+10	; 0x0a
    2d68:	00 82       	st	Z, r0
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	9a 87       	std	Y+10, r25	; 0x0a
    2d72:	89 87       	std	Y+9, r24	; 0x09
    2d74:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d76:	91 50       	subi	r25, 0x01	; 1
    2d78:	9d 87       	std	Y+13, r25	; 0x0d
    2d7a:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d7c:	ee 23       	and	r30, r30
    2d7e:	51 f7       	brne	.-44     	; 0x2d54 <main+0x4a>
	smoke_sensor_init(&smoke_conf);
    2d80:	ce 01       	movw	r24, r28
    2d82:	06 96       	adiw	r24, 0x06	; 6
    2d84:	0e 94 03 18 	call	0x3006	; 0x3006 <smoke_sensor_init>

	flame_init();
    2d88:	0e 94 1b 08 	call	0x1036	; 0x1036 <flame_init>
	flame_setCallBack(flame_callBack);
    2d8c:	83 e8       	ldi	r24, 0x83	; 131
    2d8e:	97 e1       	ldi	r25, 0x17	; 23
    2d90:	0e 94 37 08 	call	0x106e	; 0x106e <flame_setCallBack>

	Buzzer_init();
    2d94:	0e 94 67 07 	call	0xece	; 0xece <Buzzer_init>
	Pumb_init();
    2d98:	0e 94 32 18 	call	0x3064	; 0x3064 <Pumb_init>

	/* Initialize LCD driver */
	LCD_init();
    2d9c:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_init>
	LCD_clearScreen();
    2da0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_clearScreen>

	while (1) {
		/* Get the ADC values */
		temp = LM35_getTemperature();
    2da4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <LM35_getTemperature>
    2da8:	8b 83       	std	Y+3, r24	; 0x03
		ldr_read = ADC_readChannel(7);
    2daa:	87 e0       	ldi	r24, 0x07	; 7
    2dac:	0e 94 3f 07 	call	0xe7e	; 0xe7e <ADC_readChannel>
    2db0:	89 83       	std	Y+1, r24	; 0x01
		if ((smoke_sensor_read(&smoke_conf) == DIGITAL_LOW_STATE)||(g_flameFlag == PROBLEM)) {
    2db2:	ce 01       	movw	r24, r28
    2db4:	06 96       	adiw	r24, 0x06	; 6
    2db6:	0e 94 19 18 	call	0x3032	; 0x3032 <smoke_sensor_read>
    2dba:	88 23       	and	r24, r24
    2dbc:	21 f0       	breq	.+8      	; 0x2dc6 <main+0xbc>
    2dbe:	80 91 aa 01 	lds	r24, 0x01AA
    2dc2:	81 30       	cpi	r24, 0x01	; 1
    2dc4:	f1 f4       	brne	.+60     	; 0x2e02 <main+0xf8>
			Buzzer_on();
    2dc6:	0e 94 78 07 	call	0xef0	; 0xef0 <Buzzer_on>
			pumb_rotateControl(START_ROTATION);
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	0e 94 3e 18 	call	0x307c	; 0x307c <pumb_rotateControl>
			LCD_displayStringRowColumn(1, 0, "!DANGER DETECTED!");
    2dd0:	20 e6       	ldi	r18, 0x60	; 96
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	a9 01       	movw	r20, r18
    2dda:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_displayStringRowColumn>
			while((!(PIND & (1<<PD7))) ||(PINB & (1<<PB2))){} // wait until switch is released
    2dde:	e0 e3       	ldi	r30, 0x30	; 48
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	88 23       	and	r24, r24
    2de6:	dc f7       	brge	.-10     	; 0x2dde <main+0xd4>
    2de8:	e6 e3       	ldi	r30, 0x36	; 54
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	88 2f       	mov	r24, r24
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	84 70       	andi	r24, 0x04	; 4
    2df4:	90 70       	andi	r25, 0x00	; 0
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	91 f7       	brne	.-28     	; 0x2dde <main+0xd4>
			g_smokeFlag = OKEY;
    2dfa:	10 92 ab 01 	sts	0x01AB, r1
			g_flameFlag = OKEY;
    2dfe:	10 92 aa 01 	sts	0x01AA, r1

		}
		if ((smoke_sensor_read(&smoke_conf) == DIGITAL_HIGH_STATE)&&(g_flameFlag == OKEY))
    2e02:	ce 01       	movw	r24, r28
    2e04:	06 96       	adiw	r24, 0x06	; 6
    2e06:	0e 94 19 18 	call	0x3032	; 0x3032 <smoke_sensor_read>
    2e0a:	81 30       	cpi	r24, 0x01	; 1
    2e0c:	81 f4       	brne	.+32     	; 0x2e2e <main+0x124>
    2e0e:	80 91 aa 01 	lds	r24, 0x01AA
    2e12:	88 23       	and	r24, r24
    2e14:	61 f4       	brne	.+24     	; 0x2e2e <main+0x124>
		{
			Buzzer_off();
    2e16:	0e 94 84 07 	call	0xf08	; 0xf08 <Buzzer_off>
			pumb_rotateControl(STOP_ROTATION);
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	0e 94 3e 18 	call	0x307c	; 0x307c <pumb_rotateControl>
			LCD_displayStringRowColumn(1, 0, "!SAFETY DETECTED!");
    2e20:	22 e7       	ldi	r18, 0x72	; 114
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	a9 01       	movw	r20, r18
    2e2a:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <LCD_displayStringRowColumn>

		/*********************************************************************************
		 * Control The Fan
		 *********************************************************************************/
		/* Control the duty cycle of the output PWM signal (Fan Speed) based on the temperature value */
		if (temp >= 120) {
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	88 37       	cpi	r24, 0x78	; 120
    2e32:	40 f0       	brcs	.+16     	; 0x2e44 <main+0x13a>
			/* Rotates the motor with 100% from its speed */
			DCMOTOR_rotateWithControl(ROTATE_CLOCKWISE, 100, FIRST_DC_MOTOR);
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	64 e6       	ldi	r22, 0x64	; 100
    2e38:	41 e0       	ldi	r20, 0x01	; 1
    2e3a:	0e 94 b0 07 	call	0xf60	; 0xf60 <DCMOTOR_rotateWithControl>
			fan1State = ROTATE_CLOCKWISE;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	8a 83       	std	Y+2, r24	; 0x02
    2e42:	27 c0       	rjmp	.+78     	; 0x2e92 <main+0x188>
		} else if (temp >= 90) {
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	8a 35       	cpi	r24, 0x5A	; 90
    2e48:	40 f0       	brcs	.+16     	; 0x2e5a <main+0x150>
			/* Rotates the motor with 75% from its speed */
			DCMOTOR_rotateWithControl(ROTATE_CLOCKWISE, 75, FIRST_DC_MOTOR);
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	6b e4       	ldi	r22, 0x4B	; 75
    2e4e:	41 e0       	ldi	r20, 0x01	; 1
    2e50:	0e 94 b0 07 	call	0xf60	; 0xf60 <DCMOTOR_rotateWithControl>
			fan1State = ROTATE_CLOCKWISE;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	8a 83       	std	Y+2, r24	; 0x02
    2e58:	1c c0       	rjmp	.+56     	; 0x2e92 <main+0x188>
		} else if (temp >= 60) {
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	8c 33       	cpi	r24, 0x3C	; 60
    2e5e:	40 f0       	brcs	.+16     	; 0x2e70 <main+0x166>
			/* Rotates the motor with 50% from its speed */
			DCMOTOR_rotateWithControl(ROTATE_CLOCKWISE, 50, FIRST_DC_MOTOR);
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	62 e3       	ldi	r22, 0x32	; 50
    2e64:	41 e0       	ldi	r20, 0x01	; 1
    2e66:	0e 94 b0 07 	call	0xf60	; 0xf60 <DCMOTOR_rotateWithControl>
			fan1State = ROTATE_CLOCKWISE;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	8a 83       	std	Y+2, r24	; 0x02
    2e6e:	11 c0       	rjmp	.+34     	; 0x2e92 <main+0x188>
		} else if (temp >= 30) {
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	8e 31       	cpi	r24, 0x1E	; 30
    2e74:	40 f0       	brcs	.+16     	; 0x2e86 <main+0x17c>
			/* Rotates the motor with 25% from its speed */
			DCMOTOR_rotateWithControl(ROTATE_CLOCKWISE, 25, FIRST_DC_MOTOR);
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	69 e1       	ldi	r22, 0x19	; 25
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	0e 94 b0 07 	call	0xf60	; 0xf60 <DCMOTOR_rotateWithControl>
			fan1State = ROTATE_CLOCKWISE;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	8a 83       	std	Y+2, r24	; 0x02
    2e84:	06 c0       	rjmp	.+12     	; 0x2e92 <main+0x188>
		} else {
			/* Stop the motor */
			DCMOTOR_rotateWithControl(STOP_ROTATION, 0, FIRST_DC_MOTOR);
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	60 e0       	ldi	r22, 0x00	; 0
    2e8a:	41 e0       	ldi	r20, 0x01	; 1
    2e8c:	0e 94 b0 07 	call	0xf60	; 0xf60 <DCMOTOR_rotateWithControl>
			fan1State = STOP_ROTATION;
    2e90:	1a 82       	std	Y+2, r1	; 0x02
		}

		if (ldr_read > 150) {
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	87 39       	cpi	r24, 0x97	; 151
    2e96:	18 f0       	brcs	.+6      	; 0x2e9e <main+0x194>
			RED_LED_on();
    2e98:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <RED_LED_on>
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <main+0x198>
		} else {
			RED_LED_off();
    2e9e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <RED_LED_off>
		}

#if MODE == DEVELOPMENT_MODE
		/* Display the temperature and FAN state */
		if (fan1State == STOP_ROTATION) {
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	88 23       	and	r24, r24
    2ea6:	49 f4       	brne	.+18     	; 0x2eba <main+0x1b0>
			LCD_moveCursor(0, 0);
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <LCD_moveCursor>
			LCD_displayString("FAN is OFF");
    2eb0:	84 e8       	ldi	r24, 0x84	; 132
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_displayString>
    2eb8:	08 c0       	rjmp	.+16     	; 0x2eca <main+0x1c0>
		} else {
			LCD_moveCursor(0, 0);
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <LCD_moveCursor>
			LCD_displayString("FAN is ON ");
    2ec2:	8f e8       	ldi	r24, 0x8F	; 143
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_displayString>
		}

		/* Display the temperature value every time at same position */
		LCD_moveCursor(0, 11);
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	6b e0       	ldi	r22, 0x0B	; 11
    2ece:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <LCD_moveCursor>
		if (temp >= 100) {
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	84 36       	cpi	r24, 0x64	; 100
    2ed6:	30 f0       	brcs	.+12     	; 0x2ee4 <main+0x1da>
			LCD_intgerToString(temp);
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	88 2f       	mov	r24, r24
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_intgerToString>
    2ee2:	08 c0       	rjmp	.+16     	; 0x2ef4 <main+0x1ea>
		} else {
			LCD_intgerToString(temp);
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
    2eee:	80 e2       	ldi	r24, 0x20	; 32
    2ef0:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <LCD_displayCharacter>
		}
		/* Display this string "Temp =   C" only one time on LCD at the second row */
		LCD_moveCursor(0, 14);
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	6e e0       	ldi	r22, 0x0E	; 14
    2ef8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <LCD_moveCursor>
		LCD_displayString("C");
    2efc:	8a e9       	ldi	r24, 0x9A	; 154
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 66 15 	call	0x2acc	; 0x2acc <LCD_displayString>
    2f04:	4f cf       	rjmp	.-354    	; 0x2da4 <main+0x9a>

00002f06 <flame_callBack>:
#endif
	}
}

void flame_callBack()
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
	g_flameFlag = PROBLEM;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	80 93 aa 01 	sts	0x01AA, r24
}
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <PWM_Timer0_Start>:
 * 3. Setup the prescaler with F_CPU/8
 * 4. Setup the compare value based on the required input duty cycle
 * 5. Setup the direction for OC0 as output pin
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	0f 92       	push	r0
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	89 83       	std	Y+1, r24	; 0x01
	/* Timer0 initial value */
	TIMER0_TCNT0_REG.Byte=0;
    2f2a:	e2 e5       	ldi	r30, 0x52	; 82
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	10 82       	st	Z, r1

	/* Set Compare value */
	TIMER0_OCR0_REG.Byte  = ((uint32)(duty_cycle* 255) / 100);
    2f30:	0c e5       	ldi	r16, 0x5C	; 92
    2f32:	10 e0       	ldi	r17, 0x00	; 0
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	48 2f       	mov	r20, r24
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	ca 01       	movw	r24, r20
    2f3c:	9c 01       	movw	r18, r24
    2f3e:	22 0f       	add	r18, r18
    2f40:	33 1f       	adc	r19, r19
    2f42:	c9 01       	movw	r24, r18
    2f44:	96 95       	lsr	r25
    2f46:	98 2f       	mov	r25, r24
    2f48:	88 27       	eor	r24, r24
    2f4a:	97 95       	ror	r25
    2f4c:	87 95       	ror	r24
    2f4e:	82 1b       	sub	r24, r18
    2f50:	93 0b       	sbc	r25, r19
    2f52:	84 0f       	add	r24, r20
    2f54:	95 1f       	adc	r25, r21
    2f56:	aa 27       	eor	r26, r26
    2f58:	97 fd       	sbrc	r25, 7
    2f5a:	a0 95       	com	r26
    2f5c:	ba 2f       	mov	r27, r26
    2f5e:	24 e6       	ldi	r18, 0x64	; 100
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	50 e0       	ldi	r21, 0x00	; 0
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__udivmodsi4>
    2f6e:	da 01       	movw	r26, r20
    2f70:	c9 01       	movw	r24, r18
    2f72:	f8 01       	movw	r30, r16
    2f74:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TIMER0_TCCR0_REG.Bits.WGM00_BIT=1;
    2f76:	e3 e5       	ldi	r30, 0x53	; 83
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 64       	ori	r24, 0x40	; 64
    2f7e:	80 83       	st	Z, r24
	TIMER0_TCCR0_REG.Bits.WGM01_BIT=1;
    2f80:	e3 e5       	ldi	r30, 0x53	; 83
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	88 60       	ori	r24, 0x08	; 8
    2f88:	80 83       	st	Z, r24
	TIMER0_TCCR0_REG.Bits.COM01_BIT=1;
    2f8a:	e3 e5       	ldi	r30, 0x53	; 83
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	80 62       	ori	r24, 0x20	; 32
    2f92:	80 83       	st	Z, r24
	TIMER0_TCCR0_REG.Bits.CS00_BIT=1;
    2f94:	e3 e5       	ldi	r30, 0x53	; 83
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	81 60       	ori	r24, 0x01	; 1
    2f9c:	80 83       	st	Z, r24

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	63 e0       	ldi	r22, 0x03	; 3
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>
}
    2fa8:	0f 90       	pop	r0
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	08 95       	ret

00002fb4 <RED_LED_init>:
/*
 * Description :
 * A function to initialize the RED_LED
 */
void RED_LED_init(void)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
	/*Make the REDLED pin output pin*/
	GPIO_setupPinDirection(RED_LED_PORT,RED_LED_PIN,PIN_OUTPUT);
    2fbc:	82 e0       	ldi	r24, 0x02	; 2
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>

	/*Turn off the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_INPUT);
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	40 e0       	ldi	r20, 0x00	; 0
    2fcc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
}
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <RED_LED_on>:
/*
 * Description :
 * A function to turn on the RED_LED
 */
void RED_LED_on(void)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_OUTPUT);
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	41 e0       	ldi	r20, 0x01	; 1
    2fe4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
}
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <RED_LED_off>:
/*
 * Description :
 * A function to turn off theRED_LED
 */
void RED_LED_off(void)
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the RED_LED*/
	GPIO_writePin(RED_LED_PORT,RED_LED_PIN,PIN_INPUT);
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
}
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <smoke_sensor_init>:
 * Author: Mohamed Hassan
 ******************************************************************************/
#include "smoke_sensor.h"
#include "gpio_interface.h"
void smoke_sensor_init(const smokeSensorConfig * Config_Ptr)
{
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	00 d0       	rcall	.+0      	; 0x300c <smoke_sensor_init+0x6>
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(Config_Ptr->readingPinPort_ID, Config_Ptr->readingPin_ID,PIN_INPUT);
    3014:	e9 81       	ldd	r30, Y+1	; 0x01
    3016:	fa 81       	ldd	r31, Y+2	; 0x02
    3018:	80 81       	ld	r24, Z
    301a:	e9 81       	ldd	r30, Y+1	; 0x01
    301c:	fa 81       	ldd	r31, Y+2	; 0x02
    301e:	91 81       	ldd	r25, Z+1	; 0x01
    3020:	69 2f       	mov	r22, r25
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>

}
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <smoke_sensor_read>:
uint8 smoke_sensor_read(const smokeSensorConfig * smokeSensorReadingConfig_Ptr)
{
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	00 d0       	rcall	.+0      	; 0x3038 <smoke_sensor_read+0x6>
    3038:	0f 92       	push	r0
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	9b 83       	std	Y+3, r25	; 0x03
    3040:	8a 83       	std	Y+2, r24	; 0x02
	uint8 smokeSensorReading;
	smokeSensorReading = GPIO_readPin(smokeSensorReadingConfig_Ptr->readingPinPort_ID,smokeSensorReadingConfig_Ptr->readingPin_ID);
    3042:	ea 81       	ldd	r30, Y+2	; 0x02
    3044:	fb 81       	ldd	r31, Y+3	; 0x03
    3046:	80 81       	ld	r24, Z
    3048:	ea 81       	ldd	r30, Y+2	; 0x02
    304a:	fb 81       	ldd	r31, Y+3	; 0x03
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	69 2f       	mov	r22, r25
    3050:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GPIO_readPin>
    3054:	89 83       	std	Y+1, r24	; 0x01
	return smokeSensorReading;
    3056:	89 81       	ldd	r24, Y+1	; 0x01
}
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <Pumb_init>:
/* Description:
 * The Function to initialize the Pumb pin and setup the direction for the Pumb
 * via using GPIO driver.
 */
void Pumb_init(void)
{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62

	/*define Enable pin of first motor as output pin*/
	GPIO_setupPinDirection(WATER_PUMB_PORT_ID, WATER_PUMB_PIN_ID, PIN_OUTPUT);
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	64 e0       	ldi	r22, 0x04	; 4
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 80 08 	call	0x1100	; 0x1100 <GPIO_setupPinDirection>

}
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <pumb_rotateControl>:

/* Description:
 * The function that rotate the pumb or stop it
 */
void pumb_rotateControl(uint8 a_state)
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	0f 92       	push	r0
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	89 83       	std	Y+1, r24	; 0x01
	if(STOP_ROTATION==a_state)
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	88 23       	and	r24, r24
    308c:	31 f4       	brne	.+12     	; 0x309a <pumb_rotateControl+0x1e>
	{
		GPIO_writePin(WATER_PUMB_PORT_ID, WATER_PUMB_PIN_ID, LOGIC_LOW);
    308e:	82 e0       	ldi	r24, 0x02	; 2
    3090:	64 e0       	ldi	r22, 0x04	; 4
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
    3098:	08 c0       	rjmp	.+16     	; 0x30aa <pumb_rotateControl+0x2e>
	}
	else if(START_ROTATION==a_state)
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	81 30       	cpi	r24, 0x01	; 1
    309e:	29 f4       	brne	.+10     	; 0x30aa <pumb_rotateControl+0x2e>
	{
		GPIO_writePin(WATER_PUMB_PORT_ID, WATER_PUMB_PIN_ID, LOGIC_HIGH);
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	64 e0       	ldi	r22, 0x04	; 4
    30a4:	41 e0       	ldi	r20, 0x01	; 1
    30a6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <GPIO_writePin>
	else
	{
		/*Do Nothing*/
	}

}
    30aa:	0f 90       	pop	r0
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <__mulsi3>:
    30b2:	62 9f       	mul	r22, r18
    30b4:	d0 01       	movw	r26, r0
    30b6:	73 9f       	mul	r23, r19
    30b8:	f0 01       	movw	r30, r0
    30ba:	82 9f       	mul	r24, r18
    30bc:	e0 0d       	add	r30, r0
    30be:	f1 1d       	adc	r31, r1
    30c0:	64 9f       	mul	r22, r20
    30c2:	e0 0d       	add	r30, r0
    30c4:	f1 1d       	adc	r31, r1
    30c6:	92 9f       	mul	r25, r18
    30c8:	f0 0d       	add	r31, r0
    30ca:	83 9f       	mul	r24, r19
    30cc:	f0 0d       	add	r31, r0
    30ce:	74 9f       	mul	r23, r20
    30d0:	f0 0d       	add	r31, r0
    30d2:	65 9f       	mul	r22, r21
    30d4:	f0 0d       	add	r31, r0
    30d6:	99 27       	eor	r25, r25
    30d8:	72 9f       	mul	r23, r18
    30da:	b0 0d       	add	r27, r0
    30dc:	e1 1d       	adc	r30, r1
    30de:	f9 1f       	adc	r31, r25
    30e0:	63 9f       	mul	r22, r19
    30e2:	b0 0d       	add	r27, r0
    30e4:	e1 1d       	adc	r30, r1
    30e6:	f9 1f       	adc	r31, r25
    30e8:	bd 01       	movw	r22, r26
    30ea:	cf 01       	movw	r24, r30
    30ec:	11 24       	eor	r1, r1
    30ee:	08 95       	ret

000030f0 <__udivmodsi4>:
    30f0:	a1 e2       	ldi	r26, 0x21	; 33
    30f2:	1a 2e       	mov	r1, r26
    30f4:	aa 1b       	sub	r26, r26
    30f6:	bb 1b       	sub	r27, r27
    30f8:	fd 01       	movw	r30, r26
    30fa:	0d c0       	rjmp	.+26     	; 0x3116 <__udivmodsi4_ep>

000030fc <__udivmodsi4_loop>:
    30fc:	aa 1f       	adc	r26, r26
    30fe:	bb 1f       	adc	r27, r27
    3100:	ee 1f       	adc	r30, r30
    3102:	ff 1f       	adc	r31, r31
    3104:	a2 17       	cp	r26, r18
    3106:	b3 07       	cpc	r27, r19
    3108:	e4 07       	cpc	r30, r20
    310a:	f5 07       	cpc	r31, r21
    310c:	20 f0       	brcs	.+8      	; 0x3116 <__udivmodsi4_ep>
    310e:	a2 1b       	sub	r26, r18
    3110:	b3 0b       	sbc	r27, r19
    3112:	e4 0b       	sbc	r30, r20
    3114:	f5 0b       	sbc	r31, r21

00003116 <__udivmodsi4_ep>:
    3116:	66 1f       	adc	r22, r22
    3118:	77 1f       	adc	r23, r23
    311a:	88 1f       	adc	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	1a 94       	dec	r1
    3120:	69 f7       	brne	.-38     	; 0x30fc <__udivmodsi4_loop>
    3122:	60 95       	com	r22
    3124:	70 95       	com	r23
    3126:	80 95       	com	r24
    3128:	90 95       	com	r25
    312a:	9b 01       	movw	r18, r22
    312c:	ac 01       	movw	r20, r24
    312e:	bd 01       	movw	r22, r26
    3130:	cf 01       	movw	r24, r30
    3132:	08 95       	ret

00003134 <__prologue_saves__>:
    3134:	2f 92       	push	r2
    3136:	3f 92       	push	r3
    3138:	4f 92       	push	r4
    313a:	5f 92       	push	r5
    313c:	6f 92       	push	r6
    313e:	7f 92       	push	r7
    3140:	8f 92       	push	r8
    3142:	9f 92       	push	r9
    3144:	af 92       	push	r10
    3146:	bf 92       	push	r11
    3148:	cf 92       	push	r12
    314a:	df 92       	push	r13
    314c:	ef 92       	push	r14
    314e:	ff 92       	push	r15
    3150:	0f 93       	push	r16
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	ca 1b       	sub	r28, r26
    315e:	db 0b       	sbc	r29, r27
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	09 94       	ijmp

0000316c <__epilogue_restores__>:
    316c:	2a 88       	ldd	r2, Y+18	; 0x12
    316e:	39 88       	ldd	r3, Y+17	; 0x11
    3170:	48 88       	ldd	r4, Y+16	; 0x10
    3172:	5f 84       	ldd	r5, Y+15	; 0x0f
    3174:	6e 84       	ldd	r6, Y+14	; 0x0e
    3176:	7d 84       	ldd	r7, Y+13	; 0x0d
    3178:	8c 84       	ldd	r8, Y+12	; 0x0c
    317a:	9b 84       	ldd	r9, Y+11	; 0x0b
    317c:	aa 84       	ldd	r10, Y+10	; 0x0a
    317e:	b9 84       	ldd	r11, Y+9	; 0x09
    3180:	c8 84       	ldd	r12, Y+8	; 0x08
    3182:	df 80       	ldd	r13, Y+7	; 0x07
    3184:	ee 80       	ldd	r14, Y+6	; 0x06
    3186:	fd 80       	ldd	r15, Y+5	; 0x05
    3188:	0c 81       	ldd	r16, Y+4	; 0x04
    318a:	1b 81       	ldd	r17, Y+3	; 0x03
    318c:	aa 81       	ldd	r26, Y+2	; 0x02
    318e:	b9 81       	ldd	r27, Y+1	; 0x01
    3190:	ce 0f       	add	r28, r30
    3192:	d1 1d       	adc	r29, r1
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	ed 01       	movw	r28, r26
    31a0:	08 95       	ret

000031a2 <itoa>:
    31a2:	fb 01       	movw	r30, r22
    31a4:	9f 01       	movw	r18, r30
    31a6:	e8 94       	clt
    31a8:	42 30       	cpi	r20, 0x02	; 2
    31aa:	c4 f0       	brlt	.+48     	; 0x31dc <itoa+0x3a>
    31ac:	45 32       	cpi	r20, 0x25	; 37
    31ae:	b4 f4       	brge	.+44     	; 0x31dc <itoa+0x3a>
    31b0:	4a 30       	cpi	r20, 0x0A	; 10
    31b2:	29 f4       	brne	.+10     	; 0x31be <itoa+0x1c>
    31b4:	97 fb       	bst	r25, 7
    31b6:	1e f4       	brtc	.+6      	; 0x31be <itoa+0x1c>
    31b8:	90 95       	com	r25
    31ba:	81 95       	neg	r24
    31bc:	9f 4f       	sbci	r25, 0xFF	; 255
    31be:	64 2f       	mov	r22, r20
    31c0:	77 27       	eor	r23, r23
    31c2:	0e 94 36 19 	call	0x326c	; 0x326c <__udivmodhi4>
    31c6:	80 5d       	subi	r24, 0xD0	; 208
    31c8:	8a 33       	cpi	r24, 0x3A	; 58
    31ca:	0c f0       	brlt	.+2      	; 0x31ce <itoa+0x2c>
    31cc:	89 5d       	subi	r24, 0xD9	; 217
    31ce:	81 93       	st	Z+, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	a1 f7       	brne	.-24     	; 0x31be <itoa+0x1c>
    31d6:	16 f4       	brtc	.+4      	; 0x31dc <itoa+0x3a>
    31d8:	5d e2       	ldi	r21, 0x2D	; 45
    31da:	51 93       	st	Z+, r21
    31dc:	10 82       	st	Z, r1
    31de:	c9 01       	movw	r24, r18
    31e0:	0c 94 26 19 	jmp	0x324c	; 0x324c <strrev>

000031e4 <ltoa>:
    31e4:	fa 01       	movw	r30, r20
    31e6:	cf 93       	push	r28
    31e8:	ff 93       	push	r31
    31ea:	ef 93       	push	r30
    31ec:	22 30       	cpi	r18, 0x02	; 2
    31ee:	44 f1       	brlt	.+80     	; 0x3240 <ltoa+0x5c>
    31f0:	25 32       	cpi	r18, 0x25	; 37
    31f2:	34 f5       	brge	.+76     	; 0x3240 <ltoa+0x5c>
    31f4:	c2 2f       	mov	r28, r18
    31f6:	e8 94       	clt
    31f8:	ca 30       	cpi	r28, 0x0A	; 10
    31fa:	49 f4       	brne	.+18     	; 0x320e <ltoa+0x2a>
    31fc:	97 fb       	bst	r25, 7
    31fe:	3e f4       	brtc	.+14     	; 0x320e <ltoa+0x2a>
    3200:	90 95       	com	r25
    3202:	80 95       	com	r24
    3204:	70 95       	com	r23
    3206:	61 95       	neg	r22
    3208:	7f 4f       	sbci	r23, 0xFF	; 255
    320a:	8f 4f       	sbci	r24, 0xFF	; 255
    320c:	9f 4f       	sbci	r25, 0xFF	; 255
    320e:	2c 2f       	mov	r18, r28
    3210:	33 27       	eor	r19, r19
    3212:	44 27       	eor	r20, r20
    3214:	55 27       	eor	r21, r21
    3216:	ff 93       	push	r31
    3218:	ef 93       	push	r30
    321a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__udivmodsi4>
    321e:	ef 91       	pop	r30
    3220:	ff 91       	pop	r31
    3222:	60 5d       	subi	r22, 0xD0	; 208
    3224:	6a 33       	cpi	r22, 0x3A	; 58
    3226:	0c f0       	brlt	.+2      	; 0x322a <ltoa+0x46>
    3228:	69 5d       	subi	r22, 0xD9	; 217
    322a:	61 93       	st	Z+, r22
    322c:	b9 01       	movw	r22, r18
    322e:	ca 01       	movw	r24, r20
    3230:	60 50       	subi	r22, 0x00	; 0
    3232:	70 40       	sbci	r23, 0x00	; 0
    3234:	80 40       	sbci	r24, 0x00	; 0
    3236:	90 40       	sbci	r25, 0x00	; 0
    3238:	51 f7       	brne	.-44     	; 0x320e <ltoa+0x2a>
    323a:	16 f4       	brtc	.+4      	; 0x3240 <ltoa+0x5c>
    323c:	cd e2       	ldi	r28, 0x2D	; 45
    323e:	c1 93       	st	Z+, r28
    3240:	10 82       	st	Z, r1
    3242:	8f 91       	pop	r24
    3244:	9f 91       	pop	r25
    3246:	cf 91       	pop	r28
    3248:	0c 94 26 19 	jmp	0x324c	; 0x324c <strrev>

0000324c <strrev>:
    324c:	dc 01       	movw	r26, r24
    324e:	fc 01       	movw	r30, r24
    3250:	67 2f       	mov	r22, r23
    3252:	71 91       	ld	r23, Z+
    3254:	77 23       	and	r23, r23
    3256:	e1 f7       	brne	.-8      	; 0x3250 <strrev+0x4>
    3258:	32 97       	sbiw	r30, 0x02	; 2
    325a:	04 c0       	rjmp	.+8      	; 0x3264 <strrev+0x18>
    325c:	7c 91       	ld	r23, X
    325e:	6d 93       	st	X+, r22
    3260:	70 83       	st	Z, r23
    3262:	62 91       	ld	r22, -Z
    3264:	ae 17       	cp	r26, r30
    3266:	bf 07       	cpc	r27, r31
    3268:	c8 f3       	brcs	.-14     	; 0x325c <strrev+0x10>
    326a:	08 95       	ret

0000326c <__udivmodhi4>:
    326c:	aa 1b       	sub	r26, r26
    326e:	bb 1b       	sub	r27, r27
    3270:	51 e1       	ldi	r21, 0x11	; 17
    3272:	07 c0       	rjmp	.+14     	; 0x3282 <__udivmodhi4_ep>

00003274 <__udivmodhi4_loop>:
    3274:	aa 1f       	adc	r26, r26
    3276:	bb 1f       	adc	r27, r27
    3278:	a6 17       	cp	r26, r22
    327a:	b7 07       	cpc	r27, r23
    327c:	10 f0       	brcs	.+4      	; 0x3282 <__udivmodhi4_ep>
    327e:	a6 1b       	sub	r26, r22
    3280:	b7 0b       	sbc	r27, r23

00003282 <__udivmodhi4_ep>:
    3282:	88 1f       	adc	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	5a 95       	dec	r21
    3288:	a9 f7       	brne	.-22     	; 0x3274 <__udivmodhi4_loop>
    328a:	80 95       	com	r24
    328c:	90 95       	com	r25
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	08 95       	ret

00003294 <_exit>:
    3294:	f8 94       	cli

00003296 <__stop_program>:
    3296:	ff cf       	rjmp	.-2      	; 0x3296 <__stop_program>
